{
    "sourceFile": "Frontend/src/app/components/user-avatar/user-avatar.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748186751682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748187118310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,13 @@\n })\r\n export class UserAvatarComponent implements OnChanges {\r\n   @Input() username: string = '';\r\n   @Input() size: number = 40;\r\n+  @Input() rounded: boolean = true;\r\n   \r\n   svgContent: SafeHtml = '';\r\n   \r\n-  // List of colors for avatars (material design palette)\r\n+  // Material design-inspired color palette\r\n   private colors = [\r\n     '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', \r\n     '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50',\r\n     '#8BC34A', '#CDDC39', '#FFC107', '#FF9800', '#FF5722'\r\n@@ -45,22 +46,31 @@\n     // Generate a deterministic color based on username\r\n     const colorIndex = this.getHashCode(this.username) % this.colors.length;\r\n     const bgColor = this.colors[colorIndex];\r\n     \r\n-    // Create SVG content\r\n+    // Generate a pattern ID unique to this username\r\n+    const patternId = `pattern-${this.getHashCode(this.username)}`;\r\n+    \r\n+    // Create SVG content with pattern background for visual interest\r\n     const svg = `\r\n       <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${this.size}\" height=\"${this.size}\" viewBox=\"0 0 100 100\">\r\n+        <defs>\r\n+          <pattern id=\"${patternId}\" patternUnits=\"userSpaceOnUse\" width=\"10\" height=\"10\" patternTransform=\"rotate(45)\">\r\n+            <rect width=\"6\" height=\"6\" fill=\"rgba(255,255,255,0.1)\" />\r\n+          </pattern>\r\n+        </defs>\r\n         <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"${bgColor}\" />\r\n-        <text x=\"50\" y=\"65\" font-family=\"Arial, sans-serif\" font-size=\"50\" \r\n+        <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"url(#${patternId})\" />\r\n+        <text x=\"50\" y=\"67\" font-family=\"Arial, sans-serif\" font-size=\"50\" \r\n               font-weight=\"bold\" text-anchor=\"middle\" fill=\"white\">${firstLetter}</text>\r\n       </svg>\r\n     `;\r\n     \r\n     // Sanitize the SVG to safely use it in the template\r\n     this.svgContent = this.sanitizer.bypassSecurityTrustHtml(svg);\r\n   }\r\n   \r\n-  // Simple hash function to convert username to a number\r\n+  // Generate a deterministic hash code from the username string\r\n   private getHashCode(str: string): number {\r\n     let hash = 0;\r\n     for (let i = 0; i < str.length; i++) {\r\n       hash = ((hash << 5) - hash) + str.charCodeAt(i);\r\n"
                }
            ],
            "date": 1748186751682,
            "name": "Commit-0",
            "content": "import { Component, Input, OnChanges } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-user-avatar',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `<div [innerHTML]=\"svgContent\" class=\"user-avatar\"></div>`,\r\n  styles: [`\r\n    .user-avatar {\r\n      display: inline-block;\r\n      line-height: 0;\r\n    }\r\n    :host {\r\n      display: inline-block;\r\n    }\r\n  `]\r\n})\r\nexport class UserAvatarComponent implements OnChanges {\r\n  @Input() username: string = '';\r\n  @Input() size: number = 40;\r\n  \r\n  svgContent: SafeHtml = '';\r\n  \r\n  // List of colors for avatars (material design palette)\r\n  private colors = [\r\n    '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', \r\n    '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50',\r\n    '#8BC34A', '#CDDC39', '#FFC107', '#FF9800', '#FF5722'\r\n  ];\r\n  \r\n  constructor(private sanitizer: DomSanitizer) {}\r\n  \r\n  ngOnChanges(): void {\r\n    if (this.username) {\r\n      this.generateAvatar();\r\n    }\r\n  }\r\n  \r\n  private generateAvatar(): void {\r\n    // Get first letter or use a default\r\n    const firstLetter = this.username ? this.username.charAt(0).toUpperCase() : '?';\r\n    \r\n    // Generate a deterministic color based on username\r\n    const colorIndex = this.getHashCode(this.username) % this.colors.length;\r\n    const bgColor = this.colors[colorIndex];\r\n    \r\n    // Create SVG content\r\n    const svg = `\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${this.size}\" height=\"${this.size}\" viewBox=\"0 0 100 100\">\r\n        <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"${bgColor}\" />\r\n        <text x=\"50\" y=\"65\" font-family=\"Arial, sans-serif\" font-size=\"50\" \r\n              font-weight=\"bold\" text-anchor=\"middle\" fill=\"white\">${firstLetter}</text>\r\n      </svg>\r\n    `;\r\n    \r\n    // Sanitize the SVG to safely use it in the template\r\n    this.svgContent = this.sanitizer.bypassSecurityTrustHtml(svg);\r\n  }\r\n  \r\n  // Simple hash function to convert username to a number\r\n  private getHashCode(str: string): number {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      hash = ((hash << 5) - hash) + str.charCodeAt(i);\r\n      hash |= 0; // Convert to 32bit integer\r\n    }\r\n    return Math.abs(hash);\r\n  }\r\n}"
        }
    ]
}