{
    "sourceFile": "Frontend/src/app/services/subscription.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1747841650233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747842975725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Injectable } from '@angular/core';\r\n-import { BehaviorSubject, Observable } from 'rxjs';\r\n+import { BehaviorSubject, Observable, of } from 'rxjs';\r\n+import { delay } from 'rxjs/operators';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n   name: string;\r\n@@ -50,8 +51,13 @@\n     // Check for existing subscription in localStorage\r\n     const savedSubscription = localStorage.getItem('currentSubscription');\r\n     if (savedSubscription) {\r\n       this.currentSubscriptionSubject.next(savedSubscription);\r\n+      \r\n+      // Update active state of plans\r\n+      this.subscriptionPlans.forEach(plan => {\r\n+        plan.isActive = plan.id === savedSubscription;\r\n+      });\r\n     }\r\n   }\r\n \r\n   getSubscriptionPlans(): SubscriptionPlan[] {\r\n@@ -78,15 +84,7 @@\n   }\r\n \r\n   // Mock payment processing - in a real app this would connect to a payment gateway\r\n   processPurchase(planId: string, paymentDetails: any): Observable<boolean> {\r\n-    return new Observable<boolean>(observer => {\r\n-      // Simulate API call delay\r\n-      setTimeout(() => {\r\n-        // Success condition (always succeeds in this mock)\r\n-        this.setSubscription(planId);\r\n-        observer.next(true);\r\n-        observer.complete();\r\n-      }, 1500);\r\n-    });\r\n+    return of(true).pipe(delay(1500)); // Always succeeds after 1.5 seconds\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747845408875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,90 +1,84 @@\n import { Injectable } from '@angular/core';\r\n import { BehaviorSubject, Observable, of } from 'rxjs';\r\n-import { delay } from 'rxjs/operators';\r\n+import { delay, tap } from 'rxjs/operators';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n   name: string;\r\n   price: number;\r\n-  billingCycle: 'monthly' | 'yearly';\r\n+  billingCycle: string;\r\n   features: string[];\r\n-  isActive: boolean;\r\n+  isCurrent?: boolean;\r\n }\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class SubscriptionService {\r\n-  private subscriptionPlans: SubscriptionPlan[] = [\r\n-    {\r\n-      id: 'free',\r\n-      name: 'Free Plan',\r\n-      price: 0,\r\n-      billingCycle: 'monthly',\r\n-      features: [\r\n-        'Single Line Predictions',\r\n-        'Basic Result History',\r\n-        'Standard Support'\r\n-      ],\r\n-      isActive: true\r\n-    },\r\n-    {\r\n-      id: 'pro',\r\n-      name: 'Pro Plan',\r\n-      price: 19.99,\r\n-      billingCycle: 'monthly',\r\n-      features: [\r\n-        'Single Line Predictions',\r\n-        'Bulk CSV Predictions',\r\n-        'Advanced Analytics',\r\n-        'Priority Support',\r\n-        'Unlimited History'\r\n-      ],\r\n-      isActive: false\r\n-    }\r\n-  ];\r\n+  private currentSubscription = 'free';\r\n \r\n-  private currentSubscriptionSubject = new BehaviorSubject<string>('free');\r\n-  currentSubscription$ = this.currentSubscriptionSubject.asObservable();\r\n-\r\n   constructor() {\r\n-    // Check for existing subscription in localStorage\r\n+    // Try to load subscription from localStorage\r\n     const savedSubscription = localStorage.getItem('currentSubscription');\r\n     if (savedSubscription) {\r\n-      this.currentSubscriptionSubject.next(savedSubscription);\r\n-      \r\n-      // Update active state of plans\r\n-      this.subscriptionPlans.forEach(plan => {\r\n-        plan.isActive = plan.id === savedSubscription;\r\n-      });\r\n+      this.currentSubscription = savedSubscription;\r\n     }\r\n   }\r\n-\r\n+  \r\n   getSubscriptionPlans(): SubscriptionPlan[] {\r\n-    return this.subscriptionPlans;\r\n+    return [\r\n+      {\r\n+        id: 'free',\r\n+        name: 'Free Plan',\r\n+        price: 0,\r\n+        billingCycle: 'monthly',\r\n+        features: [\r\n+          'Single Line Predictions',\r\n+          'Basic Result History',\r\n+          'Standard Support'\r\n+        ],\r\n+        isCurrent: this.currentSubscription === 'free'\r\n+      },\r\n+      {\r\n+        id: 'pro',\r\n+        name: 'Pro Plan',\r\n+        price: 19.99,\r\n+        billingCycle: 'monthly',\r\n+        features: [\r\n+          'Single Line Predictions',\r\n+          'Bulk CSV Predictions',\r\n+          'Advanced Analytics',\r\n+          'Priority Support',\r\n+          'Unlimited History'\r\n+        ],\r\n+        isCurrent: this.currentSubscription === 'pro'\r\n+      }\r\n+    ];\r\n   }\r\n-\r\n+  \r\n   getCurrentSubscription(): string {\r\n-    return this.currentSubscriptionSubject.value;\r\n+    return this.currentSubscription;\r\n   }\r\n-\r\n-  setSubscription(planId: string): void {\r\n-    this.currentSubscriptionSubject.next(planId);\r\n-    localStorage.setItem('currentSubscription', planId);\r\n-    \r\n-    // Update active state of plans\r\n-    this.subscriptionPlans.forEach(plan => {\r\n-      plan.isActive = plan.id === planId;\r\n-    });\r\n+  \r\n+  setSubscription(plan: string): void {\r\n+    this.currentSubscription = plan;\r\n+    // Save to localStorage for persistence across sessions\r\n+    localStorage.setItem('currentSubscription', plan);\r\n   }\r\n-\r\n+  \r\n   hasBulkAccess(): boolean {\r\n-    const currentPlan = this.getCurrentSubscription();\r\n-    return currentPlan === 'pro';\r\n+    // Only Pro plan has bulk access\r\n+    return this.currentSubscription === 'pro';\r\n   }\r\n-\r\n-  // Mock payment processing - in a real app this would connect to a payment gateway\r\n+  \r\n   processPurchase(planId: string, paymentDetails: any): Observable<boolean> {\r\n-    return of(true).pipe(delay(1500)); // Always succeeds after 1.5 seconds\r\n+    // Mock API call\r\n+    return of(true).pipe(\r\n+      delay(1500),\r\n+      tap(() => {\r\n+        // This will persist subscription data when purchase is successful\r\n+        this.setSubscription(planId);\r\n+      })\r\n+    );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747849473421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Injectable } from '@angular/core';\r\n-import { BehaviorSubject, Observable, of } from 'rxjs';\r\n+import { Observable, of } from 'rxjs';\r\n import { delay, tap } from 'rxjs/operators';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n@@ -17,15 +17,15 @@\n export class SubscriptionService {\r\n   private currentSubscription = 'free';\r\n \r\n   constructor() {\r\n-    // Try to load subscription from localStorage\r\n+    // Load saved subscription from localStorage\r\n     const savedSubscription = localStorage.getItem('currentSubscription');\r\n     if (savedSubscription) {\r\n       this.currentSubscription = savedSubscription;\r\n     }\r\n   }\r\n-  \r\n+\r\n   getSubscriptionPlans(): SubscriptionPlan[] {\r\n     return [\r\n       {\r\n         id: 'free',\r\n@@ -54,30 +54,28 @@\n         isCurrent: this.currentSubscription === 'pro'\r\n       }\r\n     ];\r\n   }\r\n-  \r\n+\r\n   getCurrentSubscription(): string {\r\n     return this.currentSubscription;\r\n   }\r\n-  \r\n+\r\n   setSubscription(plan: string): void {\r\n     this.currentSubscription = plan;\r\n-    // Save to localStorage for persistence across sessions\r\n+    // Save to localStorage for persistence\r\n     localStorage.setItem('currentSubscription', plan);\r\n   }\r\n-  \r\n+\r\n   hasBulkAccess(): boolean {\r\n-    // Only Pro plan has bulk access\r\n     return this.currentSubscription === 'pro';\r\n   }\r\n-  \r\n+\r\n   processPurchase(planId: string, paymentDetails: any): Observable<boolean> {\r\n-    // Mock API call\r\n+    // Simulate API call with a delay\r\n     return of(true).pipe(\r\n       delay(1500),\r\n       tap(() => {\r\n-        // This will persist subscription data when purchase is successful\r\n         this.setSubscription(planId);\r\n       })\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1748376511548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Injectable } from '@angular/core';\r\n import { Observable, of } from 'rxjs';\r\n-import { delay, tap } from 'rxjs/operators';\r\n+import { HttpClient } from '@angular/common/http';\r\n+import { environment } from '../../environment/environment';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n   name: string;\r\n@@ -14,11 +15,12 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class SubscriptionService {\r\n+  private apiUrl = environment.apiUrl;\r\n   private currentSubscription = 'free';\r\n \r\n-  constructor() {\r\n+  constructor(private http: HttpClient) {\r\n     // Load saved subscription from localStorage\r\n     const savedSubscription = localStorage.getItem('currentSubscription');\r\n     if (savedSubscription) {\r\n       this.currentSubscription = savedSubscription;\r\n@@ -78,5 +80,16 @@\n         this.setSubscription(planId);\r\n       })\r\n     );\r\n   }\r\n+\r\n+  checkBulkAccess(): Observable<boolean> {\r\n+    // Mock implementation - replace with actual API call\r\n+    return of(true); // For demo purposes, always return true\r\n+\r\n+    // Real implementation would be:\r\n+    // const endpoint = `${this.apiUrl}/subscription/bulk-access`;\r\n+    // return this.http.get<{hasAccess: boolean}>(endpoint).pipe(\r\n+    //   map(response => response.hasAccess)\r\n+    // );\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748376520802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Injectable } from '@angular/core';\r\n-import { Observable, of } from 'rxjs';\r\n+import { delay, Observable, of, tap } from 'rxjs';\r\n import { HttpClient } from '@angular/common/http';\r\n import { environment } from '../../environment/environment';\r\n \r\n export interface SubscriptionPlan {\r\n"
                },
                {
                    "date": 1748376527128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { Injectable } from '@angular/core';\r\n import { delay, Observable, of, tap } from 'rxjs';\r\n import { HttpClient } from '@angular/common/http';\r\n-import { environment } from '../../environment/environment';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n   name: string;\r\n"
                },
                {
                    "date": 1748380437413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,94 +1,71 @@\n import { Injectable } from '@angular/core';\r\n-import { delay, Observable, of, tap } from 'rxjs';\r\n+import { BehaviorSubject, Observable } from 'rxjs';\r\n import { HttpClient } from '@angular/common/http';\r\n+import { environment } from '../../environment/environment';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n   name: string;\r\n+  features: string[];\r\n   price: number;\r\n-  billingCycle: string;\r\n-  features: string[];\r\n-  isCurrent?: boolean;\r\n+  interval: 'month' | 'year';\r\n+  hasBulkAccess: boolean;\r\n }\r\n \r\n+export interface UserSubscription {\r\n+  id: string;\r\n+  planId: string;\r\n+  status: 'active' | 'cancelled' | 'expired';\r\n+  currentPeriodEnd: string;\r\n+  hasBulkAccess: boolean;\r\n+}\r\n+\r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class SubscriptionService {\r\n   private apiUrl = environment.apiUrl;\r\n-  private currentSubscription = 'free';\r\n+  private subscription = new BehaviorSubject<UserSubscription | null>(null);\r\n \r\n   constructor(private http: HttpClient) {\r\n-    // Load saved subscription from localStorage\r\n-    const savedSubscription = localStorage.getItem('currentSubscription');\r\n-    if (savedSubscription) {\r\n-      this.currentSubscription = savedSubscription;\r\n-    }\r\n+    this.loadSubscriptionStatus();\r\n   }\r\n \r\n-  getSubscriptionPlans(): SubscriptionPlan[] {\r\n-    return [\r\n-      {\r\n-        id: 'free',\r\n-        name: 'Free Plan',\r\n-        price: 0,\r\n-        billingCycle: 'monthly',\r\n-        features: [\r\n-          'Single Line Predictions',\r\n-          'Basic Result History',\r\n-          'Standard Support'\r\n-        ],\r\n-        isCurrent: this.currentSubscription === 'free'\r\n-      },\r\n-      {\r\n-        id: 'pro',\r\n-        name: 'Pro Plan',\r\n-        price: 19.99,\r\n-        billingCycle: 'monthly',\r\n-        features: [\r\n-          'Single Line Predictions',\r\n-          'Bulk CSV Predictions',\r\n-          'Advanced Analytics',\r\n-          'Priority Support',\r\n-          'Unlimited History'\r\n-        ],\r\n-        isCurrent: this.currentSubscription === 'pro'\r\n-      }\r\n-    ];\r\n+  private loadSubscriptionStatus(): void {\r\n+    this.http.get<UserSubscription>(`${this.apiUrl}/subscription/status`)\r\n+      .subscribe({\r\n+        next: (subscription) => {\r\n+          this.subscription.next(subscription);\r\n+        },\r\n+        error: (error) => {\r\n+          console.error('Error loading subscription status:', error);\r\n+          this.subscription.next(null);\r\n+        }\r\n+      });\r\n   }\r\n \r\n-  getCurrentSubscription(): string {\r\n-    return this.currentSubscription;\r\n+  getSubscription(): Observable<UserSubscription | null> {\r\n+    return this.subscription.asObservable();\r\n   }\r\n \r\n-  setSubscription(plan: string): void {\r\n-    this.currentSubscription = plan;\r\n-    // Save to localStorage for persistence\r\n\\ No newline at end of file\n-    localStorage.setItem('currentSubscription', plan);\r\n+  hasBulkAccess(): boolean {\r\n+    const subscription = this.subscription.value;\r\n+    return subscription?.hasBulkAccess && subscription?.status === 'active' || false;\r\n   }\r\n \r\n-  hasBulkAccess(): boolean {\r\n-    return this.currentSubscription === 'pro';\r\n+  getPricingPlans(): Observable<SubscriptionPlan[]> {\r\n+    return this.http.get<SubscriptionPlan[]>(`${this.apiUrl}/subscription/plans`);\r\n   }\r\n \r\n-  processPurchase(planId: string, paymentDetails: any): Observable<boolean> {\r\n-    // Simulate API call with a delay\r\n-    return of(true).pipe(\r\n-      delay(1500),\r\n-      tap(() => {\r\n-        this.setSubscription(planId);\r\n-      })\r\n-    );\r\n+  subscribe(planId: string): Observable<any> {\r\n+    return this.http.post(`${this.apiUrl}/subscription/subscribe`, { planId });\r\n   }\r\n \r\n-  checkBulkAccess(): Observable<boolean> {\r\n-    // Mock implementation - replace with actual API call\r\n-    return of(true); // For demo purposes, always return true\r\n+  cancelSubscription(): Observable<any> {\r\n+    return this.http.post(`${this.apiUrl}/subscription/cancel`, {});\r\n+  }\r\n \r\n-    // Real implementation would be:\r\n-    // const endpoint = `${this.apiUrl}/subscription/bulk-access`;\r\n-    // return this.http.get<{hasAccess: boolean}>(endpoint).pipe(\r\n-    //   map(response => response.hasAccess)\r\n-    // );\r\n+  updateSubscription(planId: string): Observable<any> {\r\n+    return this.http.put(`${this.apiUrl}/subscription/update`, { planId });\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1748380501148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Injectable } from '@angular/core';\r\n import { BehaviorSubject, Observable } from 'rxjs';\r\n import { HttpClient } from '@angular/common/http';\r\n-import { environment } from '../../environment/environment';\r\n+import { environment } from '../../environments/environment';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n   name: string;\r\n"
                },
                {
                    "date": 1748380508585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,5 +67,9 @@\n \r\n   updateSubscription(planId: string): Observable<any> {\r\n     return this.http.put(`${this.apiUrl}/subscription/update`, { planId });\r\n   }\r\n+\r\n+  refreshSubscriptionStatus(): void {\r\n+    this.loadSubscriptionStatus();\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1748380574267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Injectable } from '@angular/core';\r\n-import { BehaviorSubject, Observable } from 'rxjs';\r\n+import { BehaviorSubject, Observable, of } from 'rxjs';\r\n import { HttpClient } from '@angular/common/http';\r\n import { environment } from '../../environments/environment';\r\n+import { tap, catchError } from 'rxjs/operators';\r\n \r\n export interface SubscriptionPlan {\r\n   id: string;\r\n   name: string;\r\n@@ -19,17 +20,26 @@\n   currentPeriodEnd: string;\r\n   hasBulkAccess: boolean;\r\n }\r\n \r\n+export interface PaymentFormData {\r\n+  cardNumber: string;\r\n+  expiryDate: string;\r\n+  cvv: string;\r\n+  name: string;\r\n+}\r\n+\r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class SubscriptionService {\r\n   private apiUrl = environment.apiUrl;\r\n   private subscription = new BehaviorSubject<UserSubscription | null>(null);\r\n+  private subscriptionPlans = new BehaviorSubject<SubscriptionPlan[]>([]);\r\n \r\n   constructor(private http: HttpClient) {\r\n     this.loadSubscriptionStatus();\r\n+    this.loadSubscriptionPlans();\r\n   }\r\n \r\n   private loadSubscriptionStatus(): void {\r\n     this.http.get<UserSubscription>(`${this.apiUrl}/subscription/status`)\r\n@@ -43,31 +53,84 @@\n         }\r\n       });\r\n   }\r\n \r\n+  private loadSubscriptionPlans(): void {\r\n+    this.http.get<SubscriptionPlan[]>(`${this.apiUrl}/subscription/plans`)\r\n+      .subscribe({\r\n+        next: (plans) => {\r\n+          this.subscriptionPlans.next(plans);\r\n+        },\r\n+        error: (error) => {\r\n+          console.error('Error loading subscription plans:', error);\r\n+          this.subscriptionPlans.next([]);\r\n+        }\r\n+      });\r\n+  }\r\n+\r\n   getSubscription(): Observable<UserSubscription | null> {\r\n     return this.subscription.asObservable();\r\n   }\r\n \r\n+  getCurrentSubscription(): Observable<UserSubscription | null> {\r\n+    return this.subscription.asObservable();\r\n+  }\r\n+\r\n+  getSubscriptionPlans(): Observable<SubscriptionPlan[]> {\r\n+    return this.subscriptionPlans.asObservable();\r\n+  }\r\n+\r\n   hasBulkAccess(): boolean {\r\n     const subscription = this.subscription.value;\r\n     return subscription?.hasBulkAccess && subscription?.status === 'active' || false;\r\n   }\r\n \r\n-  getPricingPlans(): Observable<SubscriptionPlan[]> {\r\n-    return this.http.get<SubscriptionPlan[]>(`${this.apiUrl}/subscription/plans`);\r\n+  setSubscription(planId: string): void {\r\n+    const currentPlans = this.subscriptionPlans.value;\r\n+    const selectedPlan = currentPlans.find(plan => plan.id === planId);\r\n+    \r\n+    if (selectedPlan) {\r\n+      const updatedSubscription: UserSubscription = {\r\n+        id: crypto.randomUUID(),\r\n+        planId: selectedPlan.id,\r\n+        status: 'active',\r\n+        currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n+        hasBulkAccess: selectedPlan.hasBulkAccess\r\n+      };\r\n+      \r\n+      this.subscription.next(updatedSubscription);\r\n+    }\r\n   }\r\n \r\n+  processPurchase(planId: string, paymentData: PaymentFormData): Observable<any> {\r\n+    return this.http.post(`${this.apiUrl}/subscription/purchase`, {\r\n+      planId,\r\n+      paymentData\r\n+    }).pipe(\r\n+      tap(() => this.refreshSubscriptionStatus()),\r\n+      catchError(error => {\r\n+        console.error('Purchase failed:', error);\r\n+        return of({ success: false, error: error.message });\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n   subscribe(planId: string): Observable<any> {\r\n-    return this.http.post(`${this.apiUrl}/subscription/subscribe`, { planId });\r\n+    return this.http.post(`${this.apiUrl}/subscription/subscribe`, { planId }).pipe(\r\n+      tap(() => this.refreshSubscriptionStatus())\r\n+    );\r\n   }\r\n \r\n   cancelSubscription(): Observable<any> {\r\n-    return this.http.post(`${this.apiUrl}/subscription/cancel`, {});\r\n+    return this.http.post(`${this.apiUrl}/subscription/cancel`, {}).pipe(\r\n+      tap(() => this.refreshSubscriptionStatus())\r\n+    );\r\n   }\r\n \r\n   updateSubscription(planId: string): Observable<any> {\r\n-    return this.http.put(`${this.apiUrl}/subscription/update`, { planId });\r\n+    return this.http.put(`${this.apiUrl}/subscription/update`, { planId }).pipe(\r\n+      tap(() => this.refreshSubscriptionStatus())\r\n+    );\r\n   }\r\n \r\n   refreshSubscriptionStatus(): void {\r\n     this.loadSubscriptionStatus();\r\n"
                }
            ],
            "date": 1747841650233,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface SubscriptionPlan {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  billingCycle: 'monthly' | 'yearly';\r\n  features: string[];\r\n  isActive: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubscriptionService {\r\n  private subscriptionPlans: SubscriptionPlan[] = [\r\n    {\r\n      id: 'free',\r\n      name: 'Free Plan',\r\n      price: 0,\r\n      billingCycle: 'monthly',\r\n      features: [\r\n        'Single Line Predictions',\r\n        'Basic Result History',\r\n        'Standard Support'\r\n      ],\r\n      isActive: true\r\n    },\r\n    {\r\n      id: 'pro',\r\n      name: 'Pro Plan',\r\n      price: 19.99,\r\n      billingCycle: 'monthly',\r\n      features: [\r\n        'Single Line Predictions',\r\n        'Bulk CSV Predictions',\r\n        'Advanced Analytics',\r\n        'Priority Support',\r\n        'Unlimited History'\r\n      ],\r\n      isActive: false\r\n    }\r\n  ];\r\n\r\n  private currentSubscriptionSubject = new BehaviorSubject<string>('free');\r\n  currentSubscription$ = this.currentSubscriptionSubject.asObservable();\r\n\r\n  constructor() {\r\n    // Check for existing subscription in localStorage\r\n    const savedSubscription = localStorage.getItem('currentSubscription');\r\n    if (savedSubscription) {\r\n      this.currentSubscriptionSubject.next(savedSubscription);\r\n    }\r\n  }\r\n\r\n  getSubscriptionPlans(): SubscriptionPlan[] {\r\n    return this.subscriptionPlans;\r\n  }\r\n\r\n  getCurrentSubscription(): string {\r\n    return this.currentSubscriptionSubject.value;\r\n  }\r\n\r\n  setSubscription(planId: string): void {\r\n    this.currentSubscriptionSubject.next(planId);\r\n    localStorage.setItem('currentSubscription', planId);\r\n    \r\n    // Update active state of plans\r\n    this.subscriptionPlans.forEach(plan => {\r\n      plan.isActive = plan.id === planId;\r\n    });\r\n  }\r\n\r\n  hasBulkAccess(): boolean {\r\n    const currentPlan = this.getCurrentSubscription();\r\n    return currentPlan === 'pro';\r\n  }\r\n\r\n  // Mock payment processing - in a real app this would connect to a payment gateway\r\n  processPurchase(planId: string, paymentDetails: any): Observable<boolean> {\r\n    return new Observable<boolean>(observer => {\r\n      // Simulate API call delay\r\n      setTimeout(() => {\r\n        // Success condition (always succeeds in this mock)\r\n        this.setSubscription(planId);\r\n        observer.next(true);\r\n        observer.complete();\r\n      }, 1500);\r\n    });\r\n  }\r\n}"
        }
    ]
}