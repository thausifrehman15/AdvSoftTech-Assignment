{
    "sourceFile": "Frontend/src/app/views/dashboard/dashboard-charts-data.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748182453146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748182453146,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { ChartData, ChartDataset, ChartOptions, ChartType, PluginOptionsByType, ScaleOptions, TooltipItem } from 'chart.js';\r\nimport { getStyle } from '@coreui/utils';\r\n\r\n// Define our own DeepPartial type since it's not exported from chart.js anymore\r\ntype DeepPartial<T> = T extends object ? {\r\n  [P in keyof T]?: DeepPartial<T[P]>;\r\n} : T;\r\n\r\n// Update the TooltipLabelStyle interface definition\r\ninterface TooltipLabelStyle {\r\n  backgroundColor: string | CanvasGradient | CanvasPattern;\r\n  borderColor?: string | CanvasGradient | CanvasPattern;\r\n  borderWidth?: number;\r\n  borderRadius?: number;\r\n  borderDash?: [number, number];\r\n  borderDashOffset?: number;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport interface IChartProps {\r\n  data?: ChartData;\r\n  labels?: any;\r\n  options?: ChartOptions;\r\n  colors?: any;\r\n  type: ChartType;\r\n  legend?: any;\r\n\r\n  [propName: string]: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'any'\r\n})\r\nexport class DashboardChartsData {\r\n  constructor() {\r\n    this.initMainChart();\r\n  }\r\n\r\n  public mainChart: IChartProps = { type: 'line' };\r\n\r\n  public random(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  initMainChart(period: string = 'Month') {\r\n    const brandSuccess = getStyle('--cui-success') ?? '#4dbd74';\r\n    const brandInfo = getStyle('--cui-info') ?? '#20a8d8';\r\n    const brandInfoBg = `rgba(${getStyle('--cui-info-rgb')}, .1)`\r\n    const brandDanger = getStyle('--cui-danger') ?? '#f86c6b';\r\n\r\n    // mainChart\r\n    this.mainChart['elements'] = period === 'Month' ? 12 : 27;\r\n    this.mainChart['Data1'] = [];\r\n    this.mainChart['Data2'] = [];\r\n    this.mainChart['Data3'] = [];\r\n\r\n    // generate random values for mainChart\r\n    for (let i = 0; i <= this.mainChart['elements']; i++) {\r\n      this.mainChart['Data1'].push(this.random(50, 240));\r\n      this.mainChart['Data2'].push(this.random(20, 160));\r\n      this.mainChart['Data3'].push(65);\r\n    }\r\n\r\n    let labels: string[] = [];\r\n    if (period === 'Month') {\r\n      labels = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n      ];\r\n    } else {\r\n      /* tslint:disable:max-line-length */\r\n      const week = [\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wednesday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday',\r\n        'Sunday'\r\n      ];\r\n      labels = week.concat(week, week, week);\r\n    }\r\n\r\n    const colors = [\r\n      {\r\n        // brandInfo\r\n        backgroundColor: brandInfoBg,\r\n        borderColor: brandInfo,\r\n        pointHoverBackgroundColor: brandInfo,\r\n        borderWidth: 2,\r\n        fill: true\r\n      },\r\n      {\r\n        // brandSuccess\r\n        backgroundColor: 'transparent',\r\n        borderColor: brandSuccess || '#4dbd74',\r\n        pointHoverBackgroundColor: '#fff'\r\n      },\r\n      {\r\n        // brandDanger\r\n        backgroundColor: 'transparent',\r\n        borderColor: brandDanger || '#f86c6b',\r\n        pointHoverBackgroundColor: brandDanger,\r\n        borderWidth: 1,\r\n        borderDash: [8, 5]\r\n      }\r\n    ];\r\n\r\n    const datasets: ChartDataset[] = [\r\n      {\r\n        data: this.mainChart['Data1'],\r\n        label: 'Current',\r\n        ...colors[0]\r\n      },\r\n      {\r\n        data: this.mainChart['Data2'],\r\n        label: 'Previous',\r\n        ...colors[1]\r\n      },\r\n      {\r\n        data: this.mainChart['Data3'],\r\n        label: 'BEP',\r\n        ...colors[2]\r\n      }\r\n    ];\r\n\r\n    // Update the plugins definition with a more compatible type approach\r\n    const plugins = {\r\n      legend: {\r\n        display: false\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          labelColor: (context: TooltipItem<'line'>) => {\r\n            return {\r\n              borderColor: context.dataset.borderColor as string,\r\n              backgroundColor: context.dataset.borderColor as string\r\n            };\r\n          }\r\n        }\r\n      }\r\n    } as const;\r\n\r\n    const scales = this.getScales();\r\n\r\n    const options: ChartOptions<'line'> = {\r\n      maintainAspectRatio: false,\r\n      plugins,\r\n      scales,\r\n      elements: {\r\n        line: {\r\n          tension: 0.4\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4,\r\n          hoverBorderWidth: 3\r\n        }\r\n      }\r\n    };\r\n\r\n    this.mainChart.type = 'line';\r\n    this.mainChart.options = options;\r\n    this.mainChart.data = {\r\n      datasets,\r\n      labels\r\n    };\r\n  }\r\n\r\n  getScales() {\r\n    const colorBorderTranslucent = getStyle('--cui-border-color-translucent');\r\n    const colorBody = getStyle('--cui-body-color');\r\n\r\n    const scales: ScaleOptions<any> = {\r\n      x: {\r\n        grid: {\r\n          color: colorBorderTranslucent,\r\n          drawOnChartArea: false\r\n        },\r\n        ticks: {\r\n          color: colorBody\r\n        }\r\n      },\r\n      y: {\r\n        border: {\r\n          color: colorBorderTranslucent\r\n        },\r\n        grid: {\r\n          color: colorBorderTranslucent\r\n        },\r\n        max: 250,\r\n        beginAtZero: true,\r\n        ticks: {\r\n          color: colorBody,\r\n          maxTicksLimit: 5,\r\n          stepSize: Math.ceil(250 / 5)\r\n        }\r\n      }\r\n    };\r\n    return scales;\r\n  }\r\n}\r\n"
        }
    ]
}