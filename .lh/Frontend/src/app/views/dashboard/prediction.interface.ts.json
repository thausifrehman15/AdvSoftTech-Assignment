{
    "sourceFile": "Frontend/src/app/views/dashboard/prediction.interface.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748182596040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748182596040,
            "name": "Commit-0",
            "content": "import { ChartData } from \"chart.js\";\r\n\r\nexport interface LoginRequest {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  user?: {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n  };\r\n  message?: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterResponse {\r\n  success: boolean;\r\n  message: string;\r\n  user?: {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n  };\r\n}\r\n\r\nexport interface PredictionRequest {\r\n  text: string;\r\n}\r\n\r\nexport interface PredictionResponse {\r\n  text: string;\r\n  confidence: number;\r\n  final_prediction?: string;\r\n  sentiment_scores?: {name:string,value:number}[];\r\n  timestamp?: Date;\r\n}\r\n\r\nexport interface FileUploadResponse {\r\n  fileId: string;\r\n  name: string;\r\n  status: string;\r\n  message?: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface FileListItem {\r\n  id: string;\r\n  name: string;\r\n  data: any[];\r\n  chartData?: ChartData;\r\n  isDefault?: boolean;\r\n  status: string;\r\n  timestamp: Date; \r\n}\r\n\r\n// Make the data property optional in CompletedFile\r\nexport interface CompletedFile {\r\n  id: string;\r\n  name: string;\r\n  status: string;\r\n  timestamp: Date;\r\n  data?: PredictionResponse[]; // Use PredictionResponse for data\r\n}\r\n\r\n// Use FileListItem for completedFiles since your mock data matches that structure\r\nexport interface FileListResponse {\r\n  pendingFiles: Array<{\r\n    id: string;\r\n    name: string;\r\n    timestamp: string;\r\n  }>;\r\n  completedFiles: Array<{\r\n    id: string;\r\n    name: string;\r\n    status: string;\r\n    timestamp: string;\r\n    data?: PredictionResponse[];\r\n  }>;\r\n  count: number;\r\n}\r\n\r\nexport interface FileDetailResponse {\r\n  id: string;\r\n  name: string;\r\n  status: string;\r\n  timestamp: Date;\r\n  uploadedAt?: string;\r\n  data?: PredictionResponse[]; // Use PredictionResponse for data\r\n}\r\n\r\nexport interface FileStatusResponse {\r\n  id: string;\r\n  status: string;\r\n  progress?: number;\r\n  message?: string;\r\n}\r\n\r\n// Update the UserDataResponse to match your mock data structure\r\nexport interface UserDataResponse {\r\n  username: string;\r\n  email: string;\r\n  totalPredictions: number;\r\n  totalFiles: number;\r\n  predictionHistory: Array<{\r\n    text: string;\r\n    final_prediction: string;\r\n    confidence: number;\r\n    sentiment_scores: { name: string; value: number; }[];\r\n    timestamp: string;\r\n  }>;\r\n  pendingFiles: Array<{\r\n    id: string;\r\n    name: string;\r\n    timestamp: string;\r\n  }>;\r\n  completedFiles: Array<{\r\n    id: string;\r\n    name: string;\r\n    status: string;\r\n    timestamp: string;\r\n    data?: PredictionResponse[];\r\n  }>;\r\n}\r\n\r\n// Add additional interfaces if needed...\r\n"
        }
    ]
}