{
    "sourceFile": "Frontend/src/app/views/dashboard/prediction.service_prod.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1747912697537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747912723374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n   private useMockData = false;\r\n   private authToken: string | null = null;\r\n \r\n   constructor(private http: HttpClient) {\r\n-    // Check for saved token in local storage\r\n     this.authToken = localStorage.getItem('authToken');\r\n   }\r\n \r\n   // Authentication methods\r\n"
                },
                {
                    "date": 1747912736604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,8 @@\n   }\r\n \r\n   // Authentication methods\r\n   login(username: string, password: string): Observable<LoginResponse> {\r\n-    if (this.useMockData) {\r\n-      return this.mockLogin(username, password);\r\n-    }\r\n-\r\n     const endpoint = `${this.apiUrl}/auth/login`;\r\n     const request: LoginRequest = { username, password };\r\n     \r\n     return this.http.post<LoginResponse>(endpoint, request).pipe(\r\n"
                },
                {
                    "date": 1747917494232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n   constructor(private http: HttpClient) {\r\n     this.authToken = localStorage.getItem('authToken');\r\n   }\r\n \r\n-  // Authentication methods\r\n   login(username: string, password: string): Observable<LoginResponse> {\r\n     const endpoint = `${this.apiUrl}/auth/login`;\r\n     const request: LoginRequest = { username, password };\r\n     \r\n@@ -47,11 +46,8 @@\n     );\r\n   }\r\n \r\n   register(email: string, username: string, password: string): Observable<RegisterResponse> {\r\n-    if (this.useMockData) {\r\n-      return this.mockRegister(email, username, password);\r\n-    }\r\n     \r\n     const endpoint = `${this.apiUrl}/auth/register`;\r\n     const request: RegisterRequest = { email, username, password };\r\n     \r\n"
                },
                {
                    "date": 1747917502703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,9 @@\n       catchError(this.handleError)\r\n     );\r\n   }\r\n \r\n-  register(email: string, username: string, password: string): Observable<RegisterResponse> {\r\n-    \r\n+  register(email: string, username: string, password: string): Observable<RegisterResponse> {    \r\n     const endpoint = `${this.apiUrl}/auth/register`;\r\n     const request: RegisterRequest = { email, username, password };\r\n     \r\n     return this.http.post<RegisterResponse>(endpoint, request).pipe(\r\n@@ -67,11 +66,8 @@\n   }\r\n \r\n   // Text prediction\r\n   predictText(text: string): Observable<PredictionResponse> {\r\n-    if (this.useMockData) {\r\n-      return mockPredictText(text);\r\n-    }\r\n     \r\n     const endpoint = `${this.apiUrl}/predict`;\r\n     const payload: PredictionRequest = { text };\r\n     return this.http.post<PredictionResponse>(endpoint, payload, { headers: this.getAuthHeaders() });\r\n"
                },
                {
                    "date": 1747917507794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,13 +73,9 @@\n     return this.http.post<PredictionResponse>(endpoint, payload, { headers: this.getAuthHeaders() });\r\n   }\r\n \r\n   // File upload\r\n-  uploadCsvForPrediction(file: File): Observable<FileUploadResponse> {\r\n-    if (this.useMockData) {\r\n-      return mockUploadCsvFile(file);\r\n-    }\r\n-    \r\n+  uploadCsvForPrediction(file: File): Observable<FileUploadResponse> {    \r\n     const endpoint = `${this.apiUrl}/upload`;\r\n     const formData = new FormData();\r\n     formData.append('file', file);\r\n     return this.http.post<FileUploadResponse>(endpoint, formData, { headers: this.getAuthHeaders() });\r\n"
                },
                {
                    "date": 1747917513121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,8 @@\n   }\r\n \r\n   // Text prediction\r\n   predictText(text: string): Observable<PredictionResponse> {\r\n-    \r\n     const endpoint = `${this.apiUrl}/predict`;\r\n     const payload: PredictionRequest = { text };\r\n     return this.http.post<PredictionResponse>(endpoint, payload, { headers: this.getAuthHeaders() });\r\n   }\r\n@@ -82,12 +81,8 @@\n   }\r\n \r\n   // Get file list\r\n   getFiles(): Observable<FileListResponse> {\r\n-    if (this.useMockData) {\r\n-      return mockGetFiles();\r\n-    }\r\n-    \r\n     const endpoint = `${this.apiUrl}/files`;\r\n     return this.http.get<FileListResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747917519443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,22 +87,14 @@\n   }\r\n \r\n   // Get file details\r\n   getFileDetails(fileId: string): Observable<FileDetailResponse> {\r\n-    if (this.useMockData) {\r\n-      return mockGetFileDetails(fileId);\r\n-    }\r\n-    \r\n     const endpoint = `${this.apiUrl}/files/${fileId}`;\r\n     return this.http.get<FileDetailResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n   }\r\n \r\n   // Check file status\r\n   checkFileStatus(fileId: string): Observable<FileStatusResponse> {\r\n-    if (this.useMockData) {\r\n-      return mockCheckFileStatus(fileId);\r\n-    }\r\n-    \r\n     const endpoint = `${this.apiUrl}/files/${fileId}/status`;\r\n     return this.http.get<FileStatusResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747917528106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,12 +99,8 @@\n   }\r\n \r\n   // Get user data\r\n   getUserData(): Observable<UserDataResponse> {\r\n-    if (this.useMockData) {\r\n-      return mockGetUserData();\r\n-    }\r\n-    \r\n     const endpoint = `${this.apiUrl}/user/data`;\r\n     return this.http.get<UserDataResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n   }\r\n \r\n@@ -126,8 +122,5 @@\n       errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n     }\r\n     return throwError(() => new Error(errorMessage));\r\n   }\r\n-\r\n-  // Mock methods would need to be updated to use the new interfaces\r\n-  // Implementation omitted for brevity\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747917586524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,8 @@\n     );\r\n   }\r\n \r\n   logout(): void {\r\n-    // Clear authentication data\r\n     this.authToken = null;\r\n     localStorage.removeItem('authToken');\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747918194025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n export class PredictionService {\r\n   private apiUrl = environment.apiUrl;\r\n   private useMockData = false;\r\n   private authToken: string | null = null;\r\n+  private username: string | null = null;\r\n \r\n   constructor(private http: HttpClient) {\r\n     this.authToken = localStorage.getItem('authToken');\r\n   }\r\n@@ -63,9 +64,8 @@\n   isLoggedIn(): boolean {\r\n     return !!this.authToken;\r\n   }\r\n \r\n-  // Text prediction\r\n   predictText(text: string): Observable<PredictionResponse> {\r\n     const endpoint = `${this.apiUrl}/predict`;\r\n     const payload: PredictionRequest = { text };\r\n     return this.http.post<PredictionResponse>(endpoint, payload, { headers: this.getAuthHeaders() });\r\n"
                },
                {
                    "date": 1747918203381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class PredictionService {\r\n-  private apiUrl = environment.apiUrl;\r\n+  private apiUrl = environment_.apiUrl;\r\n   private useMockData = false;\r\n   private authToken: string | null = null;\r\n   private username: string | null = null;\r\n \r\n"
                },
                {
                    "date": 1747918212299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Injectable } from '@angular/core';\r\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n import { Observable, of, throwError } from 'rxjs';\r\n import { catchError, delay, map, tap } from 'rxjs/operators';\r\n-import { environment } from '../../environment/environment';\r\n+import { environment, environmentProd } from '../../environment/environment';\r\n \r\n // Import interfaces\r\n import {\r\n   LoginRequest,\r\n@@ -22,10 +22,9 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class PredictionService {\r\n-  private apiUrl = environment_.apiUrl;\r\n-  private useMockData = false;\r\n+  private apiUrl = environmentProd.apiUrl;\r\n   private authToken: string | null = null;\r\n   private username: string | null = null;\r\n \r\n   constructor(private http: HttpClient) {\r\n"
                },
                {
                    "date": 1747918220482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n   private username: string | null = null;\r\n \r\n   constructor(private http: HttpClient) {\r\n     this.authToken = localStorage.getItem('authToken');\r\n+    this.username = localStorage.getItem('username');\r\n   }\r\n \r\n   login(username: string, password: string): Observable<LoginResponse> {\r\n     const endpoint = `${this.apiUrl}/auth/login`;\r\n"
                },
                {
                    "date": 1747918253235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,12 @@\n     return this.http.post<LoginResponse>(endpoint, request).pipe(\r\n       tap(response => {\r\n         if (response && response.token) {\r\n           this.authToken = response.token;\r\n+          this.authToken = response.token;\r\n+          this.username = username; // Store username\r\n           localStorage.setItem('authToken', response.token);\r\n+          localStorage.setItem('username', username); // Save username in localStorage\r\n         }\r\n       }),\r\n       catchError(this.handleError)\r\n     );\r\n"
                },
                {
                    "date": 1747918258762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,12 +39,11 @@\n     return this.http.post<LoginResponse>(endpoint, request).pipe(\r\n       tap(response => {\r\n         if (response && response.token) {\r\n           this.authToken = response.token;\r\n-          this.authToken = response.token;\r\n           this.username = username; // Store username\r\n           localStorage.setItem('authToken', response.token);\r\n-          localStorage.setItem('username', username); // Save username in localStorage\r\n+          localStorage.setItem('username', username); \r\n         }\r\n       }),\r\n       catchError(this.handleError)\r\n     );\r\n"
                },
                {
                    "date": 1747918320632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     return this.http.post<LoginResponse>(endpoint, request).pipe(\r\n       tap(response => {\r\n         if (response && response.token) {\r\n           this.authToken = response.token;\r\n-          this.username = username; // Store username\r\n+          this.username = username;\r\n           localStorage.setItem('authToken', response.token);\r\n           localStorage.setItem('username', username); \r\n         }\r\n       }),\r\n@@ -59,9 +59,11 @@\n   }\r\n \r\n   logout(): void {\r\n     this.authToken = null;\r\n+    this.username = null;\r\n     localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('username');\r\n   }\r\n \r\n   isLoggedIn(): boolean {\r\n     return !!this.authToken;\r\n"
                },
                {
                    "date": 1747918329382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,13 @@\n   isLoggedIn(): boolean {\r\n     return !!this.authToken;\r\n   }\r\n \r\n+    getCurrentUsername(): string | null {\r\n+    return this.username;\r\n+  }\r\n+\r\n+\r\n   predictText(text: string): Observable<PredictionResponse> {\r\n     const endpoint = `${this.apiUrl}/predict`;\r\n     const payload: PredictionRequest = { text };\r\n     return this.http.post<PredictionResponse>(endpoint, payload, { headers: this.getAuthHeaders() });\r\n"
                },
                {
                    "date": 1747918484997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,17 +68,16 @@\n   isLoggedIn(): boolean {\r\n     return !!this.authToken;\r\n   }\r\n \r\n-    getCurrentUsername(): string | null {\r\n+  getCurrentUsername(): string | null {\r\n     return this.username;\r\n   }\r\n \r\n-\r\n   predictText(text: string): Observable<PredictionResponse> {\r\n     const endpoint = `${this.apiUrl}/predict`;\r\n     const payload: PredictionRequest = { text };\r\n-    return this.http.post<PredictionResponse>(endpoint, payload, { headers: this.getAuthHeaders() });\r\n+    return this.http.post<PredictionResponse>(endpoint, payload);\r\n   }\r\n \r\n   // File upload\r\n   uploadCsvForPrediction(file: File): Observable<FileUploadResponse> {    \r\n"
                },
                {
                    "date": 1747918491576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,15 +83,15 @@\n   uploadCsvForPrediction(file: File): Observable<FileUploadResponse> {    \r\n     const endpoint = `${this.apiUrl}/upload`;\r\n     const formData = new FormData();\r\n     formData.append('file', file);\r\n-    return this.http.post<FileUploadResponse>(endpoint, formData, { headers: this.getAuthHeaders() });\r\n+    return this.http.post<FileUploadResponse>(endpoint, formData);\r\n   }\r\n \r\n   // Get file list\r\n   getFiles(): Observable<FileListResponse> {\r\n     const endpoint = `${this.apiUrl}/files`;\r\n-    return this.http.get<FileListResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n+    return this.http.get<FileListResponse>(endpoint);\r\n   }\r\n \r\n   // Get file details\r\n   getFileDetails(fileId: string): Observable<FileDetailResponse> {\r\n"
                },
                {
                    "date": 1747918497731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,21 +95,21 @@\n \r\n   // Get file details\r\n   getFileDetails(fileId: string): Observable<FileDetailResponse> {\r\n     const endpoint = `${this.apiUrl}/files/${fileId}`;\r\n-    return this.http.get<FileDetailResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n+    return this.http.get<FileDetailResponse>(endpoint);\r\n   }\r\n \r\n   // Check file status\r\n   checkFileStatus(fileId: string): Observable<FileStatusResponse> {\r\n     const endpoint = `${this.apiUrl}/files/${fileId}/status`;\r\n-    return this.http.get<FileStatusResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n+    return this.http.get<FileStatusResponse>(endpoint);\r\n   }\r\n \r\n   // Get user data\r\n   getUserData(): Observable<UserDataResponse> {\r\n     const endpoint = `${this.apiUrl}/user/data`;\r\n-    return this.http.get<UserDataResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n+    return this.http.get<UserDataResponse>(endpoint);\r\n   }\r\n \r\n   // Private helper methods\r\n   private getAuthHeaders(): HttpHeaders {\r\n"
                },
                {
                    "date": 1747942978919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n     const endpoint = `${this.apiUrl}/predict`;\r\n     const payload: PredictionRequest = { text };\r\n     return this.http.post<PredictionResponse>(endpoint, payload);\r\n   }\r\n-\r\n+w\r\n   // File upload\r\n   uploadCsvForPrediction(file: File): Observable<FileUploadResponse> {    \r\n     const endpoint = `${this.apiUrl}/upload`;\r\n     const formData = new FormData();\r\n@@ -110,16 +110,8 @@\n     const endpoint = `${this.apiUrl}/user/data`;\r\n     return this.http.get<UserDataResponse>(endpoint);\r\n   }\r\n \r\n-  // Private helper methods\r\n-  private getAuthHeaders(): HttpHeaders {\r\n-    return new HttpHeaders({\r\n-      'Content-Type': 'application/json',\r\n-      'Authorization': `Bearer ${this.authToken || ''}` // Use empty string as fallback\r\n-    });\r\n-  }\r\n-\r\n   private handleError(error: any) {\r\n     let errorMessage = '';\r\n     if (error.error instanceof ErrorEvent) {\r\n       // Client-side error\r\n"
                },
                {
                    "date": 1748256808497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,22 +3,8 @@\n import { Observable, of, throwError } from 'rxjs';\r\n import { catchError, delay, map, tap } from 'rxjs/operators';\r\n import { environment, environmentProd } from '../../environment/environment';\r\n \r\n-// Import interfaces\r\n-import {\r\n-  LoginRequest,\r\n-  LoginResponse,\r\n-  RegisterRequest,\r\n-  RegisterResponse,\r\n-  PredictionRequest,\r\n-  PredictionResponse,\r\n-  FileUploadResponse,\r\n-  FileListResponse,\r\n-  FileDetailResponse,\r\n-  FileStatusResponse,\r\n-  UserDataResponse\r\n-} from '../../interfaces';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n@@ -77,9 +63,9 @@\n     const endpoint = `${this.apiUrl}/predict`;\r\n     const payload: PredictionRequest = { text };\r\n     return this.http.post<PredictionResponse>(endpoint, payload);\r\n   }\r\n-w\r\n+\r\n   // File upload\r\n   uploadCsvForPrediction(file: File): Observable<FileUploadResponse> {    \r\n     const endpoint = `${this.apiUrl}/upload`;\r\n     const formData = new FormData();\r\n"
                },
                {
                    "date": 1748256814622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n import { Observable, of, throwError } from 'rxjs';\r\n import { catchError, delay, map, tap } from 'rxjs/operators';\r\n import { environment, environmentProd } from '../../environment/environment';\r\n+import { LoginResponse } from '../../interfaces/auth/login.interface';\r\n \r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n"
                },
                {
                    "date": 1748256822906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n import { Observable, of, throwError } from 'rxjs';\r\n import { catchError, delay, map, tap } from 'rxjs/operators';\r\n import { environment, environmentProd } from '../../environment/environment';\r\n-import { LoginResponse } from '../../interfaces/auth/login.interface';\r\n+import { LoginResponse, LoginRequest, RegisterResponse, RegisterRequest, PredictionResponse, PredictionRequest, FileUploadResponse, FileListResponse, FileDetailResponse, FileStatusResponse, UserDataResponse } from './prediction.interface';\r\n \r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n"
                }
            ],
            "date": 1747912697537,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, delay, map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environment/environment';\r\n\r\n// Import interfaces\r\nimport {\r\n  LoginRequest,\r\n  LoginResponse,\r\n  RegisterRequest,\r\n  RegisterResponse,\r\n  PredictionRequest,\r\n  PredictionResponse,\r\n  FileUploadResponse,\r\n  FileListResponse,\r\n  FileDetailResponse,\r\n  FileStatusResponse,\r\n  UserDataResponse\r\n} from '../../interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PredictionService {\r\n  private apiUrl = environment.apiUrl;\r\n  private useMockData = false;\r\n  private authToken: string | null = null;\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Check for saved token in local storage\r\n    this.authToken = localStorage.getItem('authToken');\r\n  }\r\n\r\n  // Authentication methods\r\n  login(username: string, password: string): Observable<LoginResponse> {\r\n    if (this.useMockData) {\r\n      return this.mockLogin(username, password);\r\n    }\r\n\r\n    const endpoint = `${this.apiUrl}/auth/login`;\r\n    const request: LoginRequest = { username, password };\r\n    \r\n    return this.http.post<LoginResponse>(endpoint, request).pipe(\r\n      tap(response => {\r\n        if (response && response.token) {\r\n          this.authToken = response.token;\r\n          localStorage.setItem('authToken', response.token);\r\n        }\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  register(email: string, username: string, password: string): Observable<RegisterResponse> {\r\n    if (this.useMockData) {\r\n      return this.mockRegister(email, username, password);\r\n    }\r\n    \r\n    const endpoint = `${this.apiUrl}/auth/register`;\r\n    const request: RegisterRequest = { email, username, password };\r\n    \r\n    return this.http.post<RegisterResponse>(endpoint, request).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    // Clear authentication data\r\n    this.authToken = null;\r\n    localStorage.removeItem('authToken');\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.authToken;\r\n  }\r\n\r\n  // Text prediction\r\n  predictText(text: string): Observable<PredictionResponse> {\r\n    if (this.useMockData) {\r\n      return mockPredictText(text);\r\n    }\r\n    \r\n    const endpoint = `${this.apiUrl}/predict`;\r\n    const payload: PredictionRequest = { text };\r\n    return this.http.post<PredictionResponse>(endpoint, payload, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  // File upload\r\n  uploadCsvForPrediction(file: File): Observable<FileUploadResponse> {\r\n    if (this.useMockData) {\r\n      return mockUploadCsvFile(file);\r\n    }\r\n    \r\n    const endpoint = `${this.apiUrl}/upload`;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    return this.http.post<FileUploadResponse>(endpoint, formData, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  // Get file list\r\n  getFiles(): Observable<FileListResponse> {\r\n    if (this.useMockData) {\r\n      return mockGetFiles();\r\n    }\r\n    \r\n    const endpoint = `${this.apiUrl}/files`;\r\n    return this.http.get<FileListResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  // Get file details\r\n  getFileDetails(fileId: string): Observable<FileDetailResponse> {\r\n    if (this.useMockData) {\r\n      return mockGetFileDetails(fileId);\r\n    }\r\n    \r\n    const endpoint = `${this.apiUrl}/files/${fileId}`;\r\n    return this.http.get<FileDetailResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  // Check file status\r\n  checkFileStatus(fileId: string): Observable<FileStatusResponse> {\r\n    if (this.useMockData) {\r\n      return mockCheckFileStatus(fileId);\r\n    }\r\n    \r\n    const endpoint = `${this.apiUrl}/files/${fileId}/status`;\r\n    return this.http.get<FileStatusResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  // Get user data\r\n  getUserData(): Observable<UserDataResponse> {\r\n    if (this.useMockData) {\r\n      return mockGetUserData();\r\n    }\r\n    \r\n    const endpoint = `${this.apiUrl}/user/data`;\r\n    return this.http.get<UserDataResponse>(endpoint, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  // Private helper methods\r\n  private getAuthHeaders(): HttpHeaders {\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${this.authToken || ''}` // Use empty string as fallback\r\n    });\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  // Mock methods would need to be updated to use the new interfaces\r\n  // Implementation omitted for brevity\r\n}"
        }
    ]
}