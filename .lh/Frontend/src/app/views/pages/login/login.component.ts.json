{
    "sourceFile": "Frontend/src/app/views/pages/login/login.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1747837354235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747837750952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,148 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n import { NgStyle, NgIf } from '@angular/common';\r\n import { IconDirective } from '@coreui/icons-angular';\r\n-import { ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective } from '@coreui/angular';\r\n-import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n+import { ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective, AlertComponent } from '@coreui/angular';\r\n+import { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n+import { Router } from '@angular/router';\r\n+import { PredictionService } from '../../dashboard/prediction.service';\r\n \r\n @Component({\r\n-    selector: 'app-login',\r\n-    templateUrl: './login.component.html',\r\n-    styleUrls: ['./login.component.scss'],\r\n-    imports: [\r\n-      ContainerComponent, \r\n-      RowComponent, \r\n-      ColComponent, \r\n-      CardGroupComponent, \r\n-      TextColorDirective, \r\n-      CardComponent, \r\n-      CardBodyComponent, \r\n-      FormDirective, \r\n-      InputGroupComponent, \r\n-      InputGroupTextDirective, \r\n-      IconDirective, \r\n-      FormControlDirective, \r\n-      ButtonDirective, \r\n-      NgStyle, \r\n-      NgIf, \r\n-      FormsModule, \r\n-      ReactiveFormsModule\r\n-    ]\r\n+  selector: 'app-login',\r\n+  templateUrl: './login.component.html',\r\n+  styleUrls: ['./login.component.scss'],\r\n+  imports: [\r\n+    ContainerComponent,\r\n+    RowComponent,\r\n+    ColComponent,\r\n+    CardGroupComponent,\r\n+    TextColorDirective,\r\n+    CardComponent,\r\n+    CardBodyComponent,\r\n+    FormDirective,\r\n+    InputGroupComponent,\r\n+    InputGroupTextDirective,\r\n+    IconDirective,\r\n+    FormControlDirective,\r\n+    ButtonDirective,\r\n+    NgStyle,\r\n+    NgIf,\r\n+    FormsModule,\r\n+    ReactiveFormsModule,\r\n+    AlertComponent\r\n+  ]\r\n })\r\n-export class LoginComponent {\r\n+export class LoginComponent implements OnInit {\r\n   // Flag to toggle between login and registration forms\r\n   isLoginView = true;\r\n+  loginForm: FormGroup;\r\n+  registerForm: FormGroup;\r\n+  errorMessage: string = '';\r\n+  successMessage: string = '';\r\n+  loading: boolean = false;\r\n \r\n+  constructor(\r\n+    private fb: FormBuilder,\r\n+    private predictionService: PredictionService,\r\n+    private router: Router\r\n+  ) {\r\n+    // Initialize forms\r\n+    this.loginForm = this.fb.group({\r\n+      username: ['', [Validators.required, Validators.minLength(3)]],\r\n+      password: ['', [Validators.required, Validators.minLength(6)]]\r\n+    });\r\n+\r\n+    this.registerForm = this.fb.group({\r\n+      email: ['', [Validators.required, Validators.email]],\r\n+      username: ['', [Validators.required, Validators.minLength(3)]],\r\n+      password: ['', [Validators.required, Validators.minLength(6)]],\r\n+      confirmPassword: ['', [Validators.required]]\r\n+    }, {\r\n+      validators: this.passwordMatchValidator\r\n+    });\r\n+  }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Check if redirected from registration\r\n+    const registrationSuccess = sessionStorage.getItem('registrationSuccess');\r\n+    if (registrationSuccess) {\r\n+      this.successMessage = 'Registration successful! Please login with your new account.';\r\n+      sessionStorage.removeItem('registrationSuccess');\r\n+    }\r\n+  }\r\n+\r\n+  // Custom validator to check if passwords match\r\n+  passwordMatchValidator(group: FormGroup) {\r\n+    const password = group.get('password')?.value;\r\n+    const confirmPassword = group.get('confirmPassword')?.value;\r\n+    \r\n+    return password === confirmPassword ? null : { passwordMismatch: true };\r\n+  }\r\n+\r\n   // Switch between login and registration views\r\n   toggleView(): void {\r\n     this.isLoginView = !this.isLoginView;\r\n+    this.errorMessage = '';\r\n+    this.successMessage = '';\r\n   }\r\n+\r\n+  // Login form submission\r\n+  onLogin(): void {\r\n+    if (this.loginForm.invalid) {\r\n+      this.loginForm.markAllAsTouched();\r\n+      return;\r\n+    }\r\n+\r\n+    this.loading = true;\r\n+    this.errorMessage = '';\r\n+\r\n+    const { username, password } = this.loginForm.value;\r\n+    \r\n+    this.predictionService.login(username, password).subscribe({\r\n+      next: (response) => {\r\n+        this.loading = false;\r\n+        // Navigate to dashboard on successful login\r\n+        this.router.navigate(['/dashboard']);\r\n+      },\r\n+      error: (error) => {\r\n+        this.loading = false;\r\n+        this.errorMessage = error.message || 'Login failed. Please check your credentials.';\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Registration form submission\r\n+  onRegister(): void {\r\n+    if (this.registerForm.invalid) {\r\n+      this.registerForm.markAllAsTouched();\r\n+      return;\r\n+    }\r\n+\r\n+    this.loading = true;\r\n+    this.errorMessage = '';\r\n+\r\n+    const { email, username, password } = this.registerForm.value;\r\n+\r\n+    this.predictionService.register(email, username, password).subscribe({\r\n+      next: (response) => {\r\n+        this.loading = false;\r\n+        // Switch to login view after successful registration\r\n+        this.isLoginView = true;\r\n+        // Set registration success message\r\n+        sessionStorage.setItem('registrationSuccess', 'true');\r\n+        this.successMessage = 'Registration successful! Please login with your new account.';\r\n+        // Reset the form\r\n+        this.registerForm.reset();\r\n+      },\r\n+      error: (error) => {\r\n+        this.loading = false;\r\n+        this.errorMessage = error.message || 'Registration failed. Please try again.';\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Helper methods for form validation errors\r\n+  hasError(form: FormGroup, controlName: string, errorName: string): boolean {\r\n+    const control = form.get(controlName);\r\n+    return !!(control && control.touched && control.hasError(errorName));\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1747838078656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n     NgStyle,\r\n     NgIf,\r\n     FormsModule,\r\n     ReactiveFormsModule,\r\n-    AlertComponent\r\n+    AlertComponent,\r\n+    CommonModule\r\n   ]\r\n })\r\n export class LoginComponent implements OnInit {\r\n   // Flag to toggle between login and registration forms\r\n"
                },
                {
                    "date": 1747838133764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, OnInit } from '@angular/core';\r\n-import { NgStyle, NgIf } from '@angular/common';\r\n+import { NgStyle, NgIf, CommonModule } from '@angular/common';\r\n import { IconDirective } from '@coreui/icons-angular';\r\n import { ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective, AlertComponent } from '@coreui/angular';\r\n import { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n import { Router } from '@angular/router';\r\n"
                }
            ],
            "date": 1747837354235,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\nimport { NgStyle, NgIf } from '@angular/common';\r\nimport { IconDirective } from '@coreui/icons-angular';\r\nimport { ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective } from '@coreui/angular';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n    imports: [\r\n      ContainerComponent, \r\n      RowComponent, \r\n      ColComponent, \r\n      CardGroupComponent, \r\n      TextColorDirective, \r\n      CardComponent, \r\n      CardBodyComponent, \r\n      FormDirective, \r\n      InputGroupComponent, \r\n      InputGroupTextDirective, \r\n      IconDirective, \r\n      FormControlDirective, \r\n      ButtonDirective, \r\n      NgStyle, \r\n      NgIf, \r\n      FormsModule, \r\n      ReactiveFormsModule\r\n    ]\r\n})\r\nexport class LoginComponent {\r\n  // Flag to toggle between login and registration forms\r\n  isLoginView = true;\r\n\r\n  // Switch between login and registration views\r\n  toggleView(): void {\r\n    this.isLoginView = !this.isLoginView;\r\n  }\r\n}\r\n"
        }
    ]
}