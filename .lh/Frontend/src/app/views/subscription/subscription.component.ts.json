{
    "sourceFile": "Frontend/src/app/views/subscription/subscription.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1747841647227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747842901965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Component, OnInit } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\n-import { Router } from '@angular/router';\r\n+import { Router, RouterModule } from '@angular/router';\r\n import {\r\n   AlertComponent,\r\n   ButtonDirective,\r\n   CardBodyComponent,\r\n@@ -36,8 +36,9 @@\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     ReactiveFormsModule,\r\n+    RouterModule,\r\n     ContainerComponent,\r\n     RowComponent,\r\n     ColComponent,\r\n     CardComponent,\r\n"
                },
                {
                    "date": 1747843488400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,10 @@\n     this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n   }\r\n \r\n   selectPlan(plan: SubscriptionPlan): void {\r\n+    console.log('Plan selected:', plan); // Add debug logging\r\n+    \r\n     // If plan is free, just subscribe\r\n     if (plan.id === 'free') {\r\n       this.subscriptionService.setSubscription('free');\r\n       this.currentSubscription = 'free';\r\n@@ -104,8 +106,9 @@\n \r\n     // For paid plans, show payment modal\r\n     this.selectedPlan = plan;\r\n     this.showPaymentModal = true;\r\n+    console.log('Payment modal should be visible:', this.showPaymentModal); // Debug log\r\n   }\r\n \r\n   closeModal(): void {\r\n     this.showPaymentModal = false;\r\n"
                },
                {
                    "date": 1747843531210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n })\r\n export class SubscriptionComponent implements OnInit {\r\n   subscriptionPlans: SubscriptionPlan[] = [];\r\n   currentSubscription = 'free';\r\n-  showPaymentModal = false;\r\n+  showPaymentModal = false; // Make sure this is initialized to false\r\n   selectedPlan: SubscriptionPlan | null = null;\r\n   paymentForm: FormGroup;\r\n   processing = false;\r\n   paymentSuccess = false;\r\n"
                },
                {
                    "date": 1747843713405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,17 @@\n   ModalFooterComponent,\r\n   ModalHeaderComponent,\r\n   ModalTitleDirective\r\n } from '@coreui/angular';\r\n-import { IconDirective } from '@coreui/icons-angular';\r\n+import { IconDirective, IconModule, IconSetService } from '@coreui/icons-angular';\r\n+import { \r\n+  cilCheckAlt, \r\n+  cilX, \r\n+  cilLockLocked, \r\n+  cilUser, \r\n+  cilEnvelopeClosed, \r\n+  cilCreditCard \r\n+} from '@coreui/icons';\r\n import { SubscriptionPlan, SubscriptionService } from '../../services/subscription.service';\r\n \r\n @Component({\r\n   selector: 'app-subscription',\r\n@@ -53,8 +61,9 @@\n     FormFeedbackComponent,\r\n     InputGroupComponent,\r\n     InputGroupTextDirective,\r\n     IconDirective,\r\n+    IconModule,\r\n     AlertComponent,\r\n     TextColorDirective,\r\n     ModalComponent,\r\n     ModalBodyComponent,\r\n@@ -65,9 +74,9 @@\n })\r\n export class SubscriptionComponent implements OnInit {\r\n   subscriptionPlans: SubscriptionPlan[] = [];\r\n   currentSubscription = 'free';\r\n-  showPaymentModal = false; // Make sure this is initialized to false\r\n+  showPaymentModal = false;\r\n   selectedPlan: SubscriptionPlan | null = null;\r\n   paymentForm: FormGroup;\r\n   processing = false;\r\n   paymentSuccess = false;\r\n@@ -75,10 +84,21 @@\n \r\n   constructor(\r\n     private subscriptionService: SubscriptionService,\r\n     private fb: FormBuilder,\r\n-    private router: Router\r\n+    private router: Router,\r\n+    private iconSetService: IconSetService\r\n   ) {\r\n+    // Register needed icons\r\n+    this.iconSetService.icons = {\r\n+      cilCheckAlt,\r\n+      cilX,\r\n+      cilLockLocked,\r\n+      cilUser,\r\n+      cilEnvelopeClosed,\r\n+      cilCreditCard\r\n+    };\r\n+    \r\n     this.paymentForm = this.fb.group({\r\n       cardName: ['', [Validators.required]],\r\n       cardNumber: ['', [Validators.required, Validators.pattern(/^\\d{16}$/)]],\r\n       expiryDate: ['', [Validators.required, Validators.pattern(/^\\d{2}\\/\\d{2}$/)]],\r\n@@ -88,12 +108,15 @@\n \r\n   ngOnInit(): void {\r\n     this.subscriptionPlans = this.subscriptionService.getSubscriptionPlans();\r\n     this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n+    \r\n+    // Debug log\r\n+    console.log('Component initialized, subscription plans:', this.subscriptionPlans);\r\n   }\r\n \r\n   selectPlan(plan: SubscriptionPlan): void {\r\n-    console.log('Plan selected:', plan); // Add debug logging\r\n+    console.log('Plan selected:', plan);\r\n     \r\n     // If plan is free, just subscribe\r\n     if (plan.id === 'free') {\r\n       this.subscriptionService.setSubscription('free');\r\n@@ -106,9 +129,12 @@\n \r\n     // For paid plans, show payment modal\r\n     this.selectedPlan = plan;\r\n     this.showPaymentModal = true;\r\n-    console.log('Payment modal should be visible:', this.showPaymentModal); // Debug log\r\n+    console.log('Payment modal should be visible:', this.showPaymentModal);\r\n+    \r\n+    // Force change detection if needed\r\n+    setTimeout(() => {}, 0);\r\n   }\r\n \r\n   closeModal(): void {\r\n     this.showPaymentModal = false;\r\n"
                },
                {
                    "date": 1747844232593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import { Component, OnInit } from '@angular/core';\r\n+import { CommonModule } from '@angular/common';\r\n+import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\n+import { Router, RouterModule } from '@angular/router';\r\n+import {\r\n+  AlertComponent,\r\n+  ButtonDirective,\r\n+  CardBodyComponent,\r\n+  CardComponent,\r\n+  CardHeaderComponent,\r\n+  CardFooterComponent,\r\n+  ContainerComponent,\r\n+  FormControlDirective,\r\n+  FormDirective,\r\n+  FormFeedbackComponent,\r\n+  FormLabelDirective,\r\n+  InputGroupComponent,\r\n+  InputGroupTextDirective,\r\n+  RowComponent,\r\n+  ColComponent,\r\n+  BadgeComponent,\r\n+  TextColorDirective,\r\n+  ModalComponent,\r\n+  ModalBodyComponent,\r\n+  ModalFooterComponent,\r\n+  ModalHeaderComponent,\r\n+  ModalTitleDirective\r\n+} from '@coreui/angular';\r\n+import { IconDirective, IconModule, IconSetService } from '@coreui/icons-angular';\r\n+import { \r\n+  cilCheckAlt, \r\n+  cilX, \r\n+  cilLockLocked, \r\n+  cilUser, \r\n+  cilEnvelopeClosed, \r\n+  cilCreditCard \r\n+} from '@coreui/icons';\r\n+import { SubscriptionPlan, SubscriptionService } from '../../services/subscription.service';\r\n+\r\n+@Component({\r\n+  selector: 'app-subscription',\r\n+  templateUrl: './subscription.component.html',\r\n+  styleUrls: ['./subscription.component.scss'],\r\n+  standalone: true,\r\n+  imports: [\r\n+    CommonModule,\r\n+    ReactiveFormsModule,\r\n+    RouterModule,\r\n+    ContainerComponent,\r\n+    RowComponent,\r\n+    ColComponent,\r\n+    CardComponent,\r\n+    CardBodyComponent,\r\n+    CardHeaderComponent,\r\n+    CardFooterComponent,\r\n+    BadgeComponent,\r\n+    ButtonDirective,\r\n+    FormDirective,\r\n+    FormControlDirective,\r\n+    FormLabelDirective,\r\n+    FormFeedbackComponent,\r\n+    InputGroupComponent,\r\n+    InputGroupTextDirective,\r\n+    IconDirective,\r\n+    IconModule,\r\n+    AlertComponent,\r\n+    TextColorDirective,\r\n+    // We've replaced the modal with custom HTML, but keep these for alerts\r\n+    ModalComponent,\r\n+    ModalBodyComponent,\r\n+    ModalFooterComponent,\r\n+    ModalHeaderComponent,\r\n+    ModalTitleDirective\r\n+  ]\r\n+})\r\n+export class SubscriptionComponent implements OnInit {\r\n+  subscriptionPlans: SubscriptionPlan[] = [];\r\n+  currentSubscription = 'free';\r\n+  showPaymentModal = false;\r\n+  selectedPlan: SubscriptionPlan | null = null;\r\n+  paymentForm: FormGroup;\r\n+  processing = false;\r\n+  paymentSuccess = false;\r\n+  paymentError = '';\r\n+\r\n+  constructor(\r\n+    private subscriptionService: SubscriptionService,\r\n+    private fb: FormBuilder,\r\n+    private router: Router,\r\n+    private iconSetService: IconSetService\r\n+  ) {\r\n+    // Register needed icons\r\n+    this.iconSetService.icons = {\r\n+      cilCheckAlt,\r\n+      cilX,\r\n+      cilLockLocked,\r\n+      cilUser,\r\n+      cilEnvelopeClosed,\r\n+      cilCreditCard\r\n+    };\r\n+    \r\n+    this.paymentForm = this.fb.group({\r\n+      cardName: ['', [Validators.required]],\r\n+      cardNumber: ['', [Validators.required, Validators.pattern(/^\\d{16}$/)]],\r\n+      expiryDate: ['', [Validators.required, Validators.pattern(/^\\d{2}\\/\\d{2}$/)]],\r\n+      cvv: ['', [Validators.required, Validators.pattern(/^\\d{3,4}$/)]]\r\n+    });\r\n+  }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.subscriptionPlans = this.subscriptionService.getSubscriptionPlans();\r\n+    this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n+    \r\n+    // Debug log\r\n+    console.log('Component initialized, subscription plans:', this.subscriptionPlans);\r\n+    console.log('Current subscription:', this.currentSubscription);\r\n+  }\r\n+\r\n+  selectPlan(plan: SubscriptionPlan): void {\r\n+    console.log('Plan selected:', plan);\r\n+    \r\n+    // If plan is free, just subscribe\r\n+    if (plan.id === 'free') {\r\n+      this.subscriptionService.setSubscription('free');\r\n+      this.currentSubscription = 'free';\r\n+      setTimeout(() => {\r\n+        this.router.navigate(['/dashboard']);\r\n+      }, 1000);\r\n+      return;\r\n+    }\r\n+\r\n+    // For paid plans, show payment modal\r\n+    this.selectedPlan = plan;\r\n+    this.showPaymentModal = true;\r\n+    console.log('Payment modal should be visible:', this.showPaymentModal);\r\n+    \r\n+    // Force change detection\r\n+    setTimeout(() => {\r\n+      document.body.classList.add('modal-open');\r\n+    }, 0);\r\n+  }\r\n+\r\n+  closeModal(): void {\r\n+    this.showPaymentModal = false;\r\n+    this.selectedPlan = null;\r\n+    this.paymentForm.reset();\r\n+    this.paymentSuccess = false;\r\n+    this.paymentError = '';\r\n+    document.body.classList.remove('modal-open');\r\n+  }\r\n+\r\n+  processPurchase(): void {\r\n+    if (this.paymentForm.invalid) {\r\n+      this.paymentForm.markAllAsTouched();\r\n+      return;\r\n+    }\r\n+\r\n+    this.processing = true;\r\n+    this.paymentError = '';\r\n+\r\n+    // Mock payment processing\r\n+    if (this.selectedPlan) {\r\n+      const planId = this.selectedPlan.id;\r\n+      this.subscriptionService.processPurchase(planId, this.paymentForm.value).subscribe({\r\n+        next: (success) => {\r\n+          this.processing = false;\r\n+          if (success) {\r\n+            this.paymentSuccess = true;\r\n+            this.currentSubscription = planId;\r\n+            setTimeout(() => {\r\n+              this.closeModal();\r\n+              this.router.navigate(['/dashboard']);\r\n+            }, 2000);\r\n+          }\r\n+        },\r\n+        error: (error) => {\r\n+          this.processing = false;\r\n+          this.paymentError = 'Payment processing failed. Please try again.';\r\n+          console.error('Payment error:', error);\r\n+        }\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  isCurrentPlan(planId: string): boolean {\r\n+    return this.currentSubscription === planId;\r\n+  }\r\n+\r\n+  hasInvalidClass(controlName: string): boolean {\r\n+    const control = this.paymentForm.get(controlName);\r\n+    return !!control && control.invalid && (control.dirty || control.touched);\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747845396443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,12 +165,19 @@\n         next: (success) => {\r\n           this.processing = false;\r\n           if (success) {\r\n             this.paymentSuccess = true;\r\n+            \r\n+            // Set the subscription in the service, which enables bulk prediction access\r\n+            this.subscriptionService.setSubscription(planId);\r\n             this.currentSubscription = planId;\r\n+            \r\n+            // Log the change for debugging\r\n+            console.log(`Subscription updated to: ${planId}, bulk access: ${this.subscriptionService.hasBulkAccess()}`);\r\n+            \r\n             setTimeout(() => {\r\n               this.closeModal();\r\n-              this.router.navigate(['/dashboard']);\r\n+              this.router.navigate(['/dashboard/bulk']); // Navigate directly to bulk tab\r\n             }, 2000);\r\n           }\r\n         },\r\n         error: (error) => {\r\n@@ -189,192 +196,5 @@\n   hasInvalidClass(controlName: string): boolean {\r\n     const control = this.paymentForm.get(controlName);\r\n     return !!control && control.invalid && (control.dirty || control.touched);\r\n   }\r\n-}\n-import { Component, OnInit } from '@angular/core';\r\n-import { CommonModule } from '@angular/common';\r\n-import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\n-import { Router, RouterModule } from '@angular/router';\r\n-import {\r\n-  AlertComponent,\r\n-  ButtonDirective,\r\n-  CardBodyComponent,\r\n-  CardComponent,\r\n-  CardHeaderComponent,\r\n-  CardFooterComponent,\r\n-  ContainerComponent,\r\n-  FormControlDirective,\r\n-  FormDirective,\r\n-  FormFeedbackComponent,\r\n-  FormLabelDirective,\r\n-  InputGroupComponent,\r\n-  InputGroupTextDirective,\r\n-  RowComponent,\r\n-  ColComponent,\r\n-  BadgeComponent,\r\n-  TextColorDirective,\r\n-  ModalComponent,\r\n-  ModalBodyComponent,\r\n-  ModalFooterComponent,\r\n-  ModalHeaderComponent,\r\n-  ModalTitleDirective\r\n-} from '@coreui/angular';\r\n-import { IconDirective, IconModule, IconSetService } from '@coreui/icons-angular';\r\n-import { \r\n-  cilCheckAlt, \r\n-  cilX, \r\n-  cilLockLocked, \r\n-  cilUser, \r\n-  cilEnvelopeClosed, \r\n-  cilCreditCard \r\n-} from '@coreui/icons';\r\n-import { SubscriptionPlan, SubscriptionService } from '../../services/subscription.service';\r\n-\r\n-@Component({\r\n-  selector: 'app-subscription',\r\n-  templateUrl: './subscription.component.html',\r\n-  styleUrls: ['./subscription.component.scss'],\r\n-  standalone: true,\r\n-  imports: [\r\n-    CommonModule,\r\n-    ReactiveFormsModule,\r\n-    RouterModule,\r\n-    ContainerComponent,\r\n-    RowComponent,\r\n-    ColComponent,\r\n-    CardComponent,\r\n-    CardBodyComponent,\r\n-    CardHeaderComponent,\r\n-    CardFooterComponent,\r\n-    BadgeComponent,\r\n-    ButtonDirective,\r\n-    FormDirective,\r\n-    FormControlDirective,\r\n-    FormLabelDirective,\r\n-    FormFeedbackComponent,\r\n-    InputGroupComponent,\r\n-    InputGroupTextDirective,\r\n-    IconDirective,\r\n-    IconModule,\r\n-    AlertComponent,\r\n-    TextColorDirective,\r\n-    ModalComponent,\r\n-    ModalBodyComponent,\r\n-    ModalFooterComponent,\r\n-    ModalHeaderComponent,\r\n-    ModalTitleDirective\r\n-  ]\r\n-})\r\n-export class SubscriptionComponent implements OnInit {\r\n-  subscriptionPlans: SubscriptionPlan[] = [];\r\n-  currentSubscription = 'free';\r\n-  showPaymentModal = false;\r\n-  selectedPlan: SubscriptionPlan | null = null;\r\n-  paymentForm: FormGroup;\r\n-  processing = false;\r\n-  paymentSuccess = false;\r\n-  paymentError = '';\r\n-\r\n-  constructor(\r\n-    private subscriptionService: SubscriptionService,\r\n-    private fb: FormBuilder,\r\n-    private router: Router,\r\n-    private iconSetService: IconSetService\r\n-  ) {\r\n-    // Register needed icons\r\n-    this.iconSetService.icons = {\r\n-      cilCheckAlt,\r\n-      cilX,\r\n-      cilLockLocked,\r\n-      cilUser,\r\n-      cilEnvelopeClosed,\r\n-      cilCreditCard\r\n-    };\r\n-    \r\n-    this.paymentForm = this.fb.group({\r\n-      cardName: ['', [Validators.required]],\r\n-      cardNumber: ['', [Validators.required, Validators.pattern(/^\\d{16}$/)]],\r\n-      expiryDate: ['', [Validators.required, Validators.pattern(/^\\d{2}\\/\\d{2}$/)]],\r\n-      cvv: ['', [Validators.required, Validators.pattern(/^\\d{3,4}$/)]]\r\n-    });\r\n-  }\r\n-\r\n-  ngOnInit(): void {\r\n-    this.subscriptionPlans = this.subscriptionService.getSubscriptionPlans();\r\n-    this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n-    \r\n-    // Debug log\r\n-    console.log('Component initialized, subscription plans:', this.subscriptionPlans);\r\n-  }\r\n-\r\n-  selectPlan(plan: SubscriptionPlan): void {\r\n-    console.log('Plan selected:', plan);\r\n-    \r\n-    // If plan is free, just subscribe\r\n-    if (plan.id === 'free') {\r\n-      this.subscriptionService.setSubscription('free');\r\n-      this.currentSubscription = 'free';\r\n-      setTimeout(() => {\r\n-        this.router.navigate(['/dashboard']);\r\n-      }, 1000);\r\n-      return;\r\n-    }\r\n-\r\n-    // For paid plans, show payment modal\r\n-    this.selectedPlan = plan;\r\n-    this.showPaymentModal = true;\r\n-    console.log('Payment modal should be visible:', this.showPaymentModal);\r\n-    \r\n-    // Force change detection if needed\r\n-    setTimeout(() => {}, 0);\r\n-  }\r\n-\r\n-  closeModal(): void {\r\n-    this.showPaymentModal = false;\r\n-    this.selectedPlan = null;\r\n-    this.paymentForm.reset();\r\n-    this.paymentSuccess = false;\r\n-    this.paymentError = '';\r\n-  }\r\n-\r\n-  processPurchase(): void {\r\n-    if (this.paymentForm.invalid) {\r\n-      this.paymentForm.markAllAsTouched();\r\n-      return;\r\n-    }\r\n-\r\n-    this.processing = true;\r\n-    this.paymentError = '';\r\n-\r\n-    // Mock payment processing\r\n-    if (this.selectedPlan) {\r\n-      const planId = this.selectedPlan.id;\r\n-      this.subscriptionService.processPurchase(planId, this.paymentForm.value).subscribe({\r\n-        next: (success) => {\r\n-          this.processing = false;\r\n-          if (success) {\r\n-            this.paymentSuccess = true;\r\n-            this.currentSubscription = planId;\r\n-            setTimeout(() => {\r\n-              this.closeModal();\r\n-              this.router.navigate(['/dashboard']);\r\n-            }, 2000);\r\n-          }\r\n-        },\r\n-        error: (error) => {\r\n-          this.processing = false;\r\n-          this.paymentError = 'Payment processing failed. Please try again.';\r\n-        }\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  isCurrentPlan(planId: string): boolean {\r\n-    return this.currentSubscription === planId;\r\n-  }\r\n-\r\n-  hasInvalidClass(controlName: string): boolean {\r\n-    const control = this.paymentForm.get(controlName);\r\n-    return !!control && control.invalid && (control.dirty || control.touched);\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747848671018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,11 @@\n   cilX, \r\n   cilLockLocked, \r\n   cilUser, \r\n   cilEnvelopeClosed, \r\n-  cilCreditCard \r\n+  cilCreditCard,\r\n+  cilSun,\r\n+  cilBell\r\n } from '@coreui/icons';\r\n import { SubscriptionPlan, SubscriptionService } from '../../services/subscription.service';\r\n \r\n @Component({\r\n@@ -88,16 +90,18 @@\n     private fb: FormBuilder,\r\n     private router: Router,\r\n     private iconSetService: IconSetService\r\n   ) {\r\n-    // Register needed icons\r\n+    // Register all required icons\r\n     this.iconSetService.icons = {\r\n       cilCheckAlt,\r\n       cilX,\r\n       cilLockLocked,\r\n       cilUser,\r\n       cilEnvelopeClosed,\r\n-      cilCreditCard\r\n+      cilCreditCard,\r\n+      cilSun,\r\n+      cilBell\r\n     };\r\n     \r\n     this.paymentForm = this.fb.group({\r\n       cardName: ['', [Validators.required]],\r\n"
                },
                {
                    "date": 1747848718358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   ModalHeaderComponent,\r\n   ModalTitleDirective\r\n } from '@coreui/angular';\r\n import { IconDirective, IconModule, IconSetService } from '@coreui/icons-angular';\r\n+import { iconSubset } from '../../icons/icon-subset';\r\n import { \r\n   cilCheckAlt, \r\n   cilX, \r\n   cilLockLocked, \r\n@@ -90,19 +91,10 @@\n     private fb: FormBuilder,\r\n     private router: Router,\r\n     private iconSetService: IconSetService\r\n   ) {\r\n-    // Register all required icons\r\n-    this.iconSetService.icons = {\r\n-      cilCheckAlt,\r\n-      cilX,\r\n-      cilLockLocked,\r\n-      cilUser,\r\n-      cilEnvelopeClosed,\r\n-      cilCreditCard,\r\n-      cilSun,\r\n-      cilBell\r\n-    };\r\n+    // Use the existing icon subset\r\n+    this.iconSetService.icons = { ...iconSubset };\r\n     \r\n     this.paymentForm = this.fb.group({\r\n       cardName: ['', [Validators.required]],\r\n       cardNumber: ['', [Validators.required, Validators.pattern(/^\\d{16}$/)]],\r\n"
                },
                {
                    "date": 1747849436251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,8 +184,33 @@\n       });\r\n     }\r\n   }\r\n \r\n+  // Add a new method to handle plan cancellation\r\n+  cancelSubscription(): void {\r\n+    if (this.currentSubscription === 'free') {\r\n+      return; // Nothing to cancel\r\n+    }\r\n+    \r\n+    // Show confirmation dialog\r\n+    if (confirm('Are you sure you want to cancel your Pro subscription? You will lose access to premium features.')) {\r\n+      this.subscriptionService.setSubscription('free');\r\n+      this.currentSubscription = 'free';\r\n+      alert('Your subscription has been cancelled. Changes will take effect immediately.');\r\n+      \r\n+      // Navigate to dashboard after a short delay\r\n+      setTimeout(() => {\r\n+        this.router.navigate(['/dashboard']);\r\n+      }, 1000);\r\n+    }\r\n+  }\r\n+\r\n+  // Add a method to check if the current plan is the free plan\r\n+  isFreePlan(): boolean {\r\n+    return this.currentSubscription === 'free';\r\n+  }\r\n+\r\n+  // Update the isCurrentPlan method to include this logic\r\n   isCurrentPlan(planId: string): boolean {\r\n     return this.currentSubscription === planId;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747850119675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,18 +162,16 @@\n           this.processing = false;\r\n           if (success) {\r\n             this.paymentSuccess = true;\r\n             \r\n-            // Set the subscription in the service, which enables bulk prediction access\r\n+            // Set the subscription in the service, which enables bulk access\r\n             this.subscriptionService.setSubscription(planId);\r\n             this.currentSubscription = planId;\r\n             \r\n-            // Log the change for debugging\r\n-            console.log(`Subscription updated to: ${planId}, bulk access: ${this.subscriptionService.hasBulkAccess()}`);\r\n-            \r\n             setTimeout(() => {\r\n               this.closeModal();\r\n-              this.router.navigate(['/dashboard/bulk']); // Navigate directly to bulk tab\r\n+              // Navigate directly to the bulk tab now that they have access\r\n+              this.router.navigate(['/dashboard/bulk']);\r\n             }, 2000);\r\n           }\r\n         },\r\n         error: (error) => {\r\n"
                },
                {
                    "date": 1747853884204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,11 @@\n   processing = false;\r\n   paymentSuccess = false;\r\n   paymentError = '';\r\n \r\n+  // Add this property to your component class\r\n+  isDarkMode = false;\r\n+\r\n   constructor(\r\n     private subscriptionService: SubscriptionService,\r\n     private fb: FormBuilder,\r\n     private router: Router,\r\n@@ -106,11 +109,20 @@\n   ngOnInit(): void {\r\n     this.subscriptionPlans = this.subscriptionService.getSubscriptionPlans();\r\n     this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n     \r\n+    // Check if dark mode is active\r\n+    this.isDarkMode = document.body.classList.contains('dark-theme');\r\n+    \r\n+    // Add listener for theme changes\r\n+    document.addEventListener('themeChange', () => {\r\n+      this.isDarkMode = document.body.classList.contains('dark-theme');\r\n+    });\r\n+    \r\n     // Debug log\r\n     console.log('Component initialized, subscription plans:', this.subscriptionPlans);\r\n     console.log('Current subscription:', this.currentSubscription);\r\n+    console.log('Dark mode:', this.isDarkMode);\r\n   }\r\n \r\n   selectPlan(plan: SubscriptionPlan): void {\r\n     console.log('Plan selected:', plan);\r\n"
                },
                {
                    "date": 1747853922693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,11 +85,8 @@\n   processing = false;\r\n   paymentSuccess = false;\r\n   paymentError = '';\r\n \r\n-  // Add this property to your component class\r\n-  isDarkMode = false;\r\n-\r\n   constructor(\r\n     private subscriptionService: SubscriptionService,\r\n     private fb: FormBuilder,\r\n     private router: Router,\r\n@@ -109,20 +106,11 @@\n   ngOnInit(): void {\r\n     this.subscriptionPlans = this.subscriptionService.getSubscriptionPlans();\r\n     this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n     \r\n-    // Check if dark mode is active\r\n-    this.isDarkMode = document.body.classList.contains('dark-theme');\r\n-    \r\n-    // Add listener for theme changes\r\n-    document.addEventListener('themeChange', () => {\r\n-      this.isDarkMode = document.body.classList.contains('dark-theme');\r\n-    });\r\n-    \r\n     // Debug log\r\n     console.log('Component initialized, subscription plans:', this.subscriptionPlans);\r\n     console.log('Current subscription:', this.currentSubscription);\r\n-    console.log('Dark mode:', this.isDarkMode);\r\n   }\r\n \r\n   selectPlan(plan: SubscriptionPlan): void {\r\n     console.log('Plan selected:', plan);\r\n"
                },
                {
                    "date": 1748380981721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,219 +1,110 @@\n import { Component, OnInit } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\n-import { Router, RouterModule } from '@angular/router';\r\n-import {\r\n-  AlertComponent,\r\n-  ButtonDirective,\r\n-  CardBodyComponent,\r\n-  CardComponent,\r\n-  CardHeaderComponent,\r\n-  CardFooterComponent,\r\n-  ContainerComponent,\r\n-  FormControlDirective,\r\n-  FormDirective,\r\n-  FormFeedbackComponent,\r\n-  FormLabelDirective,\r\n-  InputGroupComponent,\r\n-  InputGroupTextDirective,\r\n-  RowComponent,\r\n-  ColComponent,\r\n-  BadgeComponent,\r\n-  TextColorDirective,\r\n-  ModalComponent,\r\n-  ModalBodyComponent,\r\n-  ModalFooterComponent,\r\n-  ModalHeaderComponent,\r\n-  ModalTitleDirective\r\n-} from '@coreui/angular';\r\n-import { IconDirective, IconModule, IconSetService } from '@coreui/icons-angular';\r\n-import { iconSubset } from '../../icons/icon-subset';\r\n-import { \r\n-  cilCheckAlt, \r\n-  cilX, \r\n-  cilLockLocked, \r\n-  cilUser, \r\n-  cilEnvelopeClosed, \r\n-  cilCreditCard,\r\n-  cilSun,\r\n-  cilBell\r\n-} from '@coreui/icons';\r\n-import { SubscriptionPlan, SubscriptionService } from '../../services/subscription.service';\r\n+import { Router } from '@angular/router';\r\n+import { SubscriptionService, SubscriptionPlan, UserSubscription } from '../../services/subscription.service';\r\n+import { take } from 'rxjs/operators';\r\n \r\n @Component({\r\n   selector: 'app-subscription',\r\n   templateUrl: './subscription.component.html',\r\n   styleUrls: ['./subscription.component.scss'],\r\n-  standalone: true,\r\n-  imports: [\r\n-    CommonModule,\r\n-    ReactiveFormsModule,\r\n-    RouterModule,\r\n-    ContainerComponent,\r\n-    RowComponent,\r\n-    ColComponent,\r\n-    CardComponent,\r\n-    CardBodyComponent,\r\n-    CardHeaderComponent,\r\n-    CardFooterComponent,\r\n-    BadgeComponent,\r\n-    ButtonDirective,\r\n-    FormDirective,\r\n-    FormControlDirective,\r\n-    FormLabelDirective,\r\n-    FormFeedbackComponent,\r\n-    InputGroupComponent,\r\n-    InputGroupTextDirective,\r\n-    IconDirective,\r\n-    IconModule,\r\n-    AlertComponent,\r\n-    TextColorDirective,\r\n-    // We've replaced the modal with custom HTML, but keep these for alerts\r\n-    ModalComponent,\r\n-    ModalBodyComponent,\r\n-    ModalFooterComponent,\r\n-    ModalHeaderComponent,\r\n-    ModalTitleDirective\r\n-  ]\r\n+  imports: [CommonModule, ReactiveFormsModule],\r\n+  standalone: true\r\n })\r\n export class SubscriptionComponent implements OnInit {\r\n   subscriptionPlans: SubscriptionPlan[] = [];\r\n-  currentSubscription = 'free';\r\n-  showPaymentModal = false;\r\n-  selectedPlan: SubscriptionPlan | null = null;\r\n+  currentSubscription: UserSubscription | null = null;\r\n   paymentForm: FormGroup;\r\n-  processing = false;\r\n-  paymentSuccess = false;\r\n-  paymentError = '';\r\n+  selectedPlan: string = '';\r\n+  isProcessing: boolean = false;\r\n \r\n   constructor(\r\n     private subscriptionService: SubscriptionService,\r\n-    private fb: FormBuilder,\r\n-    private router: Router,\r\n-    private iconSetService: IconSetService\r\n+    private formBuilder: FormBuilder,\r\n+    private router: Router\r\n   ) {\r\n-    // Use the existing icon subset\r\n-    this.iconSetService.icons = { ...iconSubset };\r\n-    \r\n-    this.paymentForm = this.fb.group({\r\n-      cardName: ['', [Validators.required]],\r\n+    this.paymentForm = this.formBuilder.group({\r\n       cardNumber: ['', [Validators.required, Validators.pattern(/^\\d{16}$/)]],\r\n-      expiryDate: ['', [Validators.required, Validators.pattern(/^\\d{2}\\/\\d{2}$/)]],\r\n-      cvv: ['', [Validators.required, Validators.pattern(/^\\d{3,4}$/)]]\r\n+      expiryDate: ['', [Validators.required, Validators.pattern(/^(0[1-9]|1[0-2])\\/\\d{2}$/)]],\r\n+      cvv: ['', [Validators.required, Validators.pattern(/^\\d{3,4}$/)]],\r\n+      name: ['', Validators.required]\r\n     });\r\n   }\r\n \r\n   ngOnInit(): void {\r\n-    this.subscriptionPlans = this.subscriptionService.getSubscriptionPlans();\r\n-    this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n-    \r\n-    // Debug log\r\n-    console.log('Component initialized, subscription plans:', this.subscriptionPlans);\r\n-    console.log('Current subscription:', this.currentSubscription);\r\n+    this.loadSubscriptionData();\r\n   }\r\n \r\n-  selectPlan(plan: SubscriptionPlan): void {\r\n-    console.log('Plan selected:', plan);\r\n-    \r\n-    // If plan is free, just subscribe\r\n-    if (plan.id === 'free') {\r\n-      this.subscriptionService.setSubscription('free');\r\n-      this.currentSubscription = 'free';\r\n-      setTimeout(() => {\r\n-        this.router.navigate(['/dashboard']);\r\n-      }, 1000);\r\n-      return;\r\n+  private async loadSubscriptionData(): Promise<void> {\r\n+    try {\r\n+      const [plans, subscription] = await Promise.all([\r\n+        this.subscriptionService.getSubscriptionPlans().pipe(take(1)).toPromise(),\r\n+        this.subscriptionService.getCurrentSubscription().pipe(take(1)).toPromise()\r\n+      ]);\r\n+\r\n+      if (plans) {\r\n+        this.subscriptionPlans = plans;\r\n+      }\r\n+      \r\n+      if (subscription) {\r\n+        this.currentSubscription = subscription;\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading subscription data:', error);\r\n     }\r\n+  }\r\n \r\n-    // For paid plans, show payment modal\r\n-    this.selectedPlan = plan;\r\n-    this.showPaymentModal = true;\r\n-    console.log('Payment modal should be visible:', this.showPaymentModal);\r\n-    \r\n-    // Force change detection\r\n-    setTimeout(() => {\r\n-      document.body.classList.add('modal-open');\r\n-    }, 0);\r\n+  selectPlan(planId: string): void {\r\n+    this.selectedPlan = planId;\r\n   }\r\n \r\n-  closeModal(): void {\r\n-    this.showPaymentModal = false;\r\n-    this.selectedPlan = null;\r\n-    this.paymentForm.reset();\r\n-    this.paymentSuccess = false;\r\n-    this.paymentError = '';\r\n-    document.body.classList.remove('modal-open');\r\n+  isPlanSelected(planId: string): boolean {\r\n+    return this.selectedPlan === planId;\r\n   }\r\n \r\n-  processPurchase(): void {\r\n-    if (this.paymentForm.invalid) {\r\n-      this.paymentForm.markAllAsTouched();\r\n+  isCurrentPlan(planId: string): boolean {\r\n+    return this.currentSubscription?.planId === planId;\r\n+  }\r\n+\r\n+  async processPurchase(): Promise<void> {\r\n+    if (!this.selectedPlan || !this.paymentForm.valid) {\r\n       return;\r\n     }\r\n \r\n-    this.processing = true;\r\n-    this.paymentError = '';\r\n+    this.isProcessing = true;\r\n \r\n-    // Mock payment processing\r\n-    if (this.selectedPlan) {\r\n-      const planId = this.selectedPlan.id;\r\n-      this.subscriptionService.processPurchase(planId, this.paymentForm.value).subscribe({\r\n-        next: (success) => {\r\n-          this.processing = false;\r\n-          if (success) {\r\n-            this.paymentSuccess = true;\r\n-            \r\n-            // Set the subscription in the service, which enables bulk access\r\n-            this.subscriptionService.setSubscription(planId);\r\n-            this.currentSubscription = planId;\r\n-            \r\n-            setTimeout(() => {\r\n-              this.closeModal();\r\n-              // Navigate directly to the bulk tab now that they have access\r\n-              this.router.navigate(['/dashboard/bulk']);\r\n-            }, 2000);\r\n-          }\r\n-        },\r\n\\ No newline at end of file\n-        error: (error) => {\r\n-          this.processing = false;\r\n-          this.paymentError = 'Payment processing failed. Please try again.';\r\n-          console.error('Payment error:', error);\r\n-        }\r\n-      });\r\n+    try {\r\n+      await this.subscriptionService.processPurchase(\r\n+        this.selectedPlan,\r\n+        this.paymentForm.value\r\n+      ).pipe(take(1)).toPromise();\r\n+\r\n+      await this.router.navigate(['/dashboard']);\r\n+    } catch (error) {\r\n+      console.error('Purchase failed:', error);\r\n+      alert('Failed to process payment. Please try again.');\r\n+    } finally {\r\n+      this.isProcessing = false;\r\n     }\r\n   }\r\n \r\n-  // Add a new method to handle plan cancellation\r\n-  cancelSubscription(): void {\r\n-    if (this.currentSubscription === 'free') {\r\n-      return; // Nothing to cancel\r\n+  async cancelSubscription(): Promise<void> {\r\n+    if (!confirm('Are you sure you want to cancel your subscription?')) {\r\n+      return;\r\n     }\r\n-    \r\n-    // Show confirmation dialog\r\n-    if (confirm('Are you sure you want to cancel your Pro subscription? You will lose access to premium features.')) {\r\n-      this.subscriptionService.setSubscription('free');\r\n-      this.currentSubscription = 'free';\r\n-      alert('Your subscription has been cancelled. Changes will take effect immediately.');\r\n-      \r\n-      // Navigate to dashboard after a short delay\r\n-      setTimeout(() => {\r\n-        this.router.navigate(['/dashboard']);\r\n-      }, 1000);\r\n+\r\n+    try {\r\n+      await this.subscriptionService.cancelSubscription().pipe(take(1)).toPromise();\r\n+      this.currentSubscription = null;\r\n+      await this.router.navigate(['/dashboard']);\r\n+    } catch (error) {\r\n+      console.error('Failed to cancel subscription:', error);\r\n+      alert('Failed to cancel subscription. Please try again.');\r\n     }\r\n   }\r\n \r\n-  // Add a method to check if the current plan is the free plan\r\n-  isFreePlan(): boolean {\r\n-    return this.currentSubscription === 'free';\r\n+  formatPrice(price: number): string {\r\n+    return `$${price.toFixed(2)}`;\r\n   }\r\n-\r\n-  // Update the isCurrentPlan method to include this logic\r\n-  isCurrentPlan(planId: string): boolean {\r\n-    return this.currentSubscription === planId;\r\n-  }\r\n-\r\n-  hasInvalidClass(controlName: string): boolean {\r\n-    const control = this.paymentForm.get(controlName);\r\n-    return !!control && control.invalid && (control.dirty || control.touched);\r\n-  }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1748381153993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,27 @@\n-import { Component, OnInit } from '@angular/core';\r\n+import { Component, OnInit, OnDestroy } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\n import { Router } from '@angular/router';\r\n-import { SubscriptionService, SubscriptionPlan, UserSubscription } from '../../services/subscription.service';\r\n-import { take } from 'rxjs/operators';\r\n+import { SubscriptionService, SubscriptionPlan, UserSubscription, PaymentFormData } \r\n+  from '../../services/subscription.service';\r\n+import { take, takeUntil } from 'rxjs/operators';\r\n+import { Subject } from 'rxjs';\r\n \r\n @Component({\r\n   selector: 'app-subscription',\r\n   templateUrl: './subscription.component.html',\r\n   styleUrls: ['./subscription.component.scss'],\r\n   imports: [CommonModule, ReactiveFormsModule],\r\n   standalone: true\r\n })\r\n-export class SubscriptionComponent implements OnInit {\r\n+export class SubscriptionComponent implements OnInit, OnDestroy {\r\n   subscriptionPlans: SubscriptionPlan[] = [];\r\n   currentSubscription: UserSubscription | null = null;\r\n   paymentForm: FormGroup;\r\n   selectedPlan: string = '';\r\n   isProcessing: boolean = false;\r\n+  private destroy$ = new Subject<void>();\r\n \r\n   constructor(\r\n     private subscriptionService: SubscriptionService,\r\n     private formBuilder: FormBuilder,\r\n@@ -32,28 +35,36 @@\n     });\r\n   }\r\n \r\n   ngOnInit(): void {\r\n-    this.loadSubscriptionData();\r\n+    this.subscriptionService.getSubscriptionPlans()\r\n+      .pipe(takeUntil(this.destroy$))\r\n+      .subscribe({\r\n+        next: (plans) => {\r\n+          this.subscriptionPlans = plans;\r\n+        },\r\n+        error: (error) => {\r\n+          console.error('Error loading subscription plans:', error);\r\n+          alert('Failed to load subscription plans. Please try again.');\r\n+        }\r\n+      });\r\n+\r\n+    this.subscriptionService.getCurrentSubscription()\r\n+      .pipe(takeUntil(this.destroy$))\r\n+      .subscribe({\r\n+        next: (subscription) => {\r\n+          this.currentSubscription = subscription;\r\n+        },\r\n+        error: (error) => {\r\n+          console.error('Error loading current subscription:', error);\r\n+          this.currentSubscription = null;\r\n+        }\r\n+      });\r\n   }\r\n \r\n-  private async loadSubscriptionData(): Promise<void> {\r\n-    try {\r\n-      const [plans, subscription] = await Promise.all([\r\n-        this.subscriptionService.getSubscriptionPlans().pipe(take(1)).toPromise(),\r\n-        this.subscriptionService.getCurrentSubscription().pipe(take(1)).toPromise()\r\n-      ]);\r\n-\r\n-      if (plans) {\r\n-        this.subscriptionPlans = plans;\r\n-      }\r\n-      \r\n-      if (subscription) {\r\n-        this.currentSubscription = subscription;\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error loading subscription data:', error);\r\n-    }\r\n+  ngOnDestroy(): void {\r\n+    this.destroy$.next();\r\n+    this.destroy$.complete();\r\n   }\r\n \r\n   selectPlan(planId: string): void {\r\n     this.selectedPlan = planId;\r\n@@ -66,43 +77,56 @@\n   isCurrentPlan(planId: string): boolean {\r\n     return this.currentSubscription?.planId === planId;\r\n   }\r\n \r\n-  async processPurchase(): Promise<void> {\r\n+  processPurchase(): void {\r\n     if (!this.selectedPlan || !this.paymentForm.valid) {\r\n       return;\r\n     }\r\n \r\n     this.isProcessing = true;\r\n \r\n-    try {\r\n-      await this.subscriptionService.processPurchase(\r\n-        this.selectedPlan,\r\n-        this.paymentForm.value\r\n-      ).pipe(take(1)).toPromise();\r\n+    const paymentData: PaymentFormData = {\r\n+      cardNumber: this.paymentForm.get('cardNumber')?.value,\r\n+      expiryDate: this.paymentForm.get('expiryDate')?.value,\r\n+      cvv: this.paymentForm.get('cvv')?.value,\r\n+      name: this.paymentForm.get('name')?.value,\r\n+    };\r\n \r\n-      await this.router.navigate(['/dashboard']);\r\n-    } catch (error) {\r\n-      console.error('Purchase failed:', error);\r\n-      alert('Failed to process payment. Please try again.');\r\n-    } finally {\r\n-      this.isProcessing = false;\r\n-    }\r\n+    this.subscriptionService.processPurchase(this.selectedPlan, paymentData)\r\n+      .pipe(take(1))\r\n+      .subscribe({\r\n+        next: () => {\r\n+          this.router.navigate(['/dashboard']);\r\n+        },\r\n+        error: (error) => {\r\n+          console.error('Purchase failed:', error);\r\n+          alert('Failed to process payment. Please try again.');\r\n+          this.isProcessing = false;\r\n+        },\r\n+        complete: () => {\r\n+          this.isProcessing = false;\r\n+        }\r\n+      });\r\n   }\r\n \r\n-  async cancelSubscription(): Promise<void> {\r\n+  cancelSubscription(): void {\r\n     if (!confirm('Are you sure you want to cancel your subscription?')) {\r\n       return;\r\n     }\r\n \r\n-    try {\r\n-      await this.subscriptionService.cancelSubscription().pipe(take(1)).toPromise();\r\n-      this.currentSubscription = null;\r\n-      await this.router.navigate(['/dashboard']);\r\n-    } catch (error) {\r\n-      console.error('Failed to cancel subscription:', error);\r\n-      alert('Failed to cancel subscription. Please try again.');\r\n-    }\r\n+    this.subscriptionService.cancelSubscription()\r\n+      .pipe(take(1))\r\n+      .subscribe({\r\n+        next: () => {\r\n+          this.currentSubscription = null;\r\n+          this.router.navigate(['/dashboard']);\r\n+        },\r\n+        error: (error) => {\r\n+          console.error('Failed to cancel subscription:', error);\r\n+          alert('Failed to cancel subscription. Please try again.');\r\n+        }\r\n+      });\r\n   }\r\n \r\n   formatPrice(price: number): string {\r\n     return `$${price.toFixed(2)}`;\r\n"
                }
            ],
            "date": 1747841647227,
            "name": "Commit-0",
            "content": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  AlertComponent,\r\n  ButtonDirective,\r\n  CardBodyComponent,\r\n  CardComponent,\r\n  CardHeaderComponent,\r\n  CardFooterComponent,\r\n  ContainerComponent,\r\n  FormControlDirective,\r\n  FormDirective,\r\n  FormFeedbackComponent,\r\n  FormLabelDirective,\r\n  InputGroupComponent,\r\n  InputGroupTextDirective,\r\n  RowComponent,\r\n  ColComponent,\r\n  BadgeComponent,\r\n  TextColorDirective,\r\n  ModalComponent,\r\n  ModalBodyComponent,\r\n  ModalFooterComponent,\r\n  ModalHeaderComponent,\r\n  ModalTitleDirective\r\n} from '@coreui/angular';\r\nimport { IconDirective } from '@coreui/icons-angular';\r\nimport { SubscriptionPlan, SubscriptionService } from '../../services/subscription.service';\r\n\r\n@Component({\r\n  selector: 'app-subscription',\r\n  templateUrl: './subscription.component.html',\r\n  styleUrls: ['./subscription.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ContainerComponent,\r\n    RowComponent,\r\n    ColComponent,\r\n    CardComponent,\r\n    CardBodyComponent,\r\n    CardHeaderComponent,\r\n    CardFooterComponent,\r\n    BadgeComponent,\r\n    ButtonDirective,\r\n    FormDirective,\r\n    FormControlDirective,\r\n    FormLabelDirective,\r\n    FormFeedbackComponent,\r\n    InputGroupComponent,\r\n    InputGroupTextDirective,\r\n    IconDirective,\r\n    AlertComponent,\r\n    TextColorDirective,\r\n    ModalComponent,\r\n    ModalBodyComponent,\r\n    ModalFooterComponent,\r\n    ModalHeaderComponent,\r\n    ModalTitleDirective\r\n  ]\r\n})\r\nexport class SubscriptionComponent implements OnInit {\r\n  subscriptionPlans: SubscriptionPlan[] = [];\r\n  currentSubscription = 'free';\r\n  showPaymentModal = false;\r\n  selectedPlan: SubscriptionPlan | null = null;\r\n  paymentForm: FormGroup;\r\n  processing = false;\r\n  paymentSuccess = false;\r\n  paymentError = '';\r\n\r\n  constructor(\r\n    private subscriptionService: SubscriptionService,\r\n    private fb: FormBuilder,\r\n    private router: Router\r\n  ) {\r\n    this.paymentForm = this.fb.group({\r\n      cardName: ['', [Validators.required]],\r\n      cardNumber: ['', [Validators.required, Validators.pattern(/^\\d{16}$/)]],\r\n      expiryDate: ['', [Validators.required, Validators.pattern(/^\\d{2}\\/\\d{2}$/)]],\r\n      cvv: ['', [Validators.required, Validators.pattern(/^\\d{3,4}$/)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscriptionPlans = this.subscriptionService.getSubscriptionPlans();\r\n    this.currentSubscription = this.subscriptionService.getCurrentSubscription();\r\n  }\r\n\r\n  selectPlan(plan: SubscriptionPlan): void {\r\n    // If plan is free, just subscribe\r\n    if (plan.id === 'free') {\r\n      this.subscriptionService.setSubscription('free');\r\n      this.currentSubscription = 'free';\r\n      setTimeout(() => {\r\n        this.router.navigate(['/dashboard']);\r\n      }, 1000);\r\n      return;\r\n    }\r\n\r\n    // For paid plans, show payment modal\r\n    this.selectedPlan = plan;\r\n    this.showPaymentModal = true;\r\n  }\r\n\r\n  closeModal(): void {\r\n    this.showPaymentModal = false;\r\n    this.selectedPlan = null;\r\n    this.paymentForm.reset();\r\n    this.paymentSuccess = false;\r\n    this.paymentError = '';\r\n  }\r\n\r\n  processPurchase(): void {\r\n    if (this.paymentForm.invalid) {\r\n      this.paymentForm.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    this.processing = true;\r\n    this.paymentError = '';\r\n\r\n    // Mock payment processing\r\n    if (this.selectedPlan) {\r\n      const planId = this.selectedPlan.id;\r\n      this.subscriptionService.processPurchase(planId, this.paymentForm.value).subscribe({\r\n        next: (success) => {\r\n          this.processing = false;\r\n          if (success) {\r\n            this.paymentSuccess = true;\r\n            this.currentSubscription = planId;\r\n            setTimeout(() => {\r\n              this.closeModal();\r\n              this.router.navigate(['/dashboard']);\r\n            }, 2000);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          this.processing = false;\r\n          this.paymentError = 'Payment processing failed. Please try again.';\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  isCurrentPlan(planId: string): boolean {\r\n    return this.currentSubscription === planId;\r\n  }\r\n\r\n  hasInvalidClass(controlName: string): boolean {\r\n    const control = this.paymentForm.get(controlName);\r\n    return !!control && control.invalid && (control.dirty || control.touched);\r\n  }\r\n}"
        }
    ]
}